{
  "openapi": "3.1.0",
  "info": {
    "title": "nocodb",
    "version": "1.0",
    "description": "NocoDB API Documentation"
  },
  "servers": [
    {
      "url": "http://localhost:8080"
    }
  ],
  "paths": {
    "/api/v1/auth/user/signup": {
      "post": {
        "summary": "Signup",
        "operationId": "auth-signup",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "The signed JWT token for information exchange"
                    }
                  }
                },
                "examples": {
                  "Successful registration response": {
                    "value": {
                      "token": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Invalid email": {
                    "value": {
                      "msg": "Invalid email"
                    }
                  },
                  "Invalid invite url": {
                    "value": {
                      "msg": "Invalid invite url"
                    }
                  },
                  "Expired invite url": {
                    "value": {
                      "msg": "Expired invite url, Please contact super admin to get a new invite url"
                    }
                  },
                  "User already exist": {
                    "value": {
                      "msg": "User already exist"
                    }
                  },
                  "Invite only signup": {
                    "value": {
                      "msg": "Not allowed to signup, contact super admin"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpReq"
              }
            }
          }
        },
        "description": "Create a new user with provided email and password and first user is marked as super admin. "
      }
    },
    "/api/v1/auth/user/signout": {
      "post": {
        "summary": "Signout",
        "operationId": "auth-signout",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "description": "Success Message"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ],
        "description": "Clear refresh token from the database and cookie."
      },
      "parameters": []
    },
    "/api/v1/auth/user/signin": {
      "post": {
        "summary": "Signin",
        "operationId": "auth-signin",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "The signed JWT token for information exchange"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInReq"
              },
              "examples": {
                "example-1": {
                  "value": {
                    "email": "user@nocodb.com",
                    "password": "Password"
                  }
                }
              }
            }
          }
        },
        "description": "Authenticate existing user with their email and password. Successful login will return a JWT access-token. "
      },
      "parameters": []
    },
    "/api/v1/auth/user/me": {
      "parameters": [],
      "get": {
        "summary": "Get User Info",
        "operationId": "auth-me",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "id": "us_8kugj628ebjngs",
                      "email": "user@nocodb.com",
                      "email_verified": true,
                      "firstname": "Alice",
                      "lastname": "Smith",
                      "roles": "org-level-viewer"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ],
        "description": "Returns authenticated user info",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "project_id",
            "description": "Pass project id to get project specific roles along with user info"
          }
        ]
      }
    },
    "/api/v1/auth/password/forgot": {
      "post": {
        "summary": "Forget Password",
        "operationId": "auth-password-forgot",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Emails user with a reset url.",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordForgotReq"
              }
            }
          },
          "description": "Pass registered user email id in request body"
        }
      },
      "parameters": []
    },
    "/api/v1/auth/password/change": {
      "post": {
        "summary": "Change Password",
        "operationId": "auth-password-change",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Success response": {
                    "value": {
                      "msg": "Password updated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Missing params": {
                    "value": {
                      "msg": "Missing new/old password"
                    }
                  },
                  "Wrong password": {
                    "value": {
                      "msg": "Current password is wrong"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Change password of authenticated user with a new one.",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChangeReq"
              },
              "examples": {
                "example-1": {
                  "value": {
                    "currentPassword": "currentPassword",
                    "newPassword": "newPassword"
                  }
                }
              }
            }
          },
          "description": "Old password need to be passed along with new password for changing password."
        }
      },
      "parameters": []
    },
    "/api/v1/auth/token/validate/{token}": {
      "post": {
        "summary": "Verify Reset Token",
        "operationId": "auth-password-reset-token-validate",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Validate password reset url token.",
        "tags": [
          "Auth"
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "name": "token",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v1/auth/email/validate/{token}": {
      "post": {
        "summary": "Verify Email",
        "operationId": "auth-email-validate",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Api for verifying email where token need to be passed which is shared to user email.",
        "tags": [
          "Auth"
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "name": "token",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v1/auth/password/reset/{token}": {
      "post": {
        "summary": "Reset Password",
        "operationId": "auth-password-reset",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Update user password to new by using reset token.",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetReq"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "name": "token",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v1/auth/token/refresh": {
      "post": {
        "summary": "Refresh Token",
        "operationId": "auth-token-refresh",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Regenerate user refresh token",
        "tags": [
          "Auth"
        ]
      },
      "parameters": []
    },
    "/api/v1/tokens": {
      "get": {
        "summary": "List Organisation API Tokens",
        "operationId": "org-tokens-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "object",
                      "properties": {
                        "list": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/ApiToken"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "created_by": {
                                    "type": "string"
                                  }
                                }
                              }
                            ],
                            "type": "object"
                          }
                        },
                        "pageInfo": {
                          "$ref": "#/components/schemas/Paginated"
                        }
                      },
                      "required": [
                        "list",
                        "pageInfo"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "List all organisation API tokens.  Access with API tokens will be blocked.",
        "tags": [
          "Organisation Tokens"
        ]
      },
      "parameters": [],
      "post": {
        "summary": "Create Organisation API Token",
        "operationId": "org-tokens-create",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTokenReq"
              }
            }
          }
        },
        "tags": [
          "Organisation Tokens"
        ],
        "description": "Creat an organisation API token. Access with API tokens will be blocked."
      }
    },
    "/api/v1/tokens/{token}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "token",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "summary": "Delete Organisation API Tokens",
        "operationId": "org-tokens-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Organisation Tokens"
        ],
        "description": "Delete an organisation API token. Access with API tokens will be blocked."
      }
    },
    "/api/v1/license": {
      "get": {
        "summary": "Get App License",
        "operationId": "org-license-get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Get the application license key. Exclusive for super admin.",
        "tags": [
          "Organisation License"
        ]
      },
      "parameters": [],
      "post": {
        "summary": "Create App License",
        "operationId": "org-license-set",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseReq"
              }
            }
          }
        },
        "tags": [
          "Organisation License"
        ],
        "description": "Set the application license key. Exclusive for super admin."
      }
    },
    "/api/v1/app-settings": {
      "get": {
        "summary": "Get App Settings",
        "operationId": "org-app-settings-get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invite_only_signup": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Get the application settings. Exclusive for super admin.",
        "tags": [
          "Organisation App Settings"
        ]
      },
      "parameters": [],
      "post": {
        "summary": "Create App Settings",
        "operationId": "org-app-settings-set",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "invite_only_signup": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Organisation App Settings"
        ],
        "description": "Update the application settings. Exclusive for super admin."
      }
    },
    "/api/v1/users": {
      "get": {
        "summary": "List Organisation Users",
        "operationId": "org-users-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "object",
                      "properties": {
                        "list": {
                          "type": "array",
                          "uniqueItems": true,
                          "minItems": 1,
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        },
                        "pageInfo": {
                          "$ref": "#/components/schemas/Paginated"
                        }
                      },
                      "required": [
                        "list",
                        "pageInfo"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "List all organisation users. Exclusive for Super Admin. Access with API Tokens will be blocked.",
        "tags": [
          "Organisation Users"
        ]
      },
      "parameters": [],
      "post": {
        "summary": "Create Organisation User",
        "operationId": "org-users-add",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgUserReq"
              }
            }
          }
        },
        "tags": [
          "Organisation Users"
        ],
        "description": "Create an organisation user. Exclusive for Super Admin. Access with API Tokens will be blocked."
      }
    },
    "/api/v1/users/{userId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "userId",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update Organisation User",
        "operationId": "org-users-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Organisation Users"
        ],
        "description": "Update an organisation user by User ID. Exclusive for Super Admin. Access with API Tokens will be blocked.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgUserReq"
              }
            }
          },
          "description": ""
        }
      },
      "delete": {
        "summary": "Delete Organisation User",
        "operationId": "org-users-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Organisation Users"
        ],
        "description": "Delete an organisation user by User ID. Exclusive for Super Admin. Access with API Tokens will be blocked."
      }
    },
    "/api/v1/users/{userId}/resend-invite": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "userId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Invite Organisation User",
        "operationId": "org-users-resend-invite",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Organisation Users"
        ],
        "description": "Resend Invitation to a specific user. Exclusive for Super Admin. Access with API Tokens will be blocked."
      }
    },
    "/api/v1/users/{userId}/generate-reset-url": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "userId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Generate Organisation User Password Reset Token",
        "operationId": "org-users-generate-password-reset-token",
        "tags": [
          "Organisation Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reset_password_token": {
                      "type": "string"
                    },
                    "reset_password_url": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Generate Password Reset Token for Organisation User. Exclusive for Super Admin. Access with API Tokens will be blocked."
      }
    },
    "/api/v1/db/meta/projects/{projectId}/users": {
      "get": {
        "summary": "List Project Users",
        "operationId": "auth-project-user-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "object",
                      "properties": {
                        "list": {
                          "type": "array",
                          "uniqueItems": true,
                          "minItems": 1,
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        },
                        "pageInfo": {
                          "$ref": "#/components/schemas/Paginated"
                        }
                      },
                      "required": [
                        "list",
                        "pageInfo"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "List all users in the given project.",
        "tags": [
          "Auth"
        ]
      },
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Create Project User",
        "operationId": "auth-project-user-add",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUserReq"
              }
            }
          }
        },
        "tags": [
          "Auth"
        ],
        "description": "Create a user and add it to the given project"
      }
    },
    "/api/v1/db/meta/projects/{projectId}/info": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Project info",
        "operationId": "project-meta-get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Node": {
                      "type": "string"
                    },
                    "Arch": {
                      "type": "string"
                    },
                    "Platform": {
                      "type": "string"
                    },
                    "Docker": {
                      "type": "boolean"
                    },
                    "Database": {
                      "type": "string"
                    },
                    "ProjectOnRootDB": {
                      "type": "string"
                    },
                    "RootDB": {
                      "type": "string"
                    },
                    "PackageVersion": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Project"
        ],
        "description": "Get info such as node version, arch, platform, is docker, rootdb and package version of a given project"
      }
    },
    "/api/v1/db/meta/projects/{projectId}/users/{userId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "userId",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update Project User",
        "operationId": "auth-project-user-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUserReq"
              }
            }
          }
        },
        "tags": [
          "Auth"
        ],
        "description": "Update a given user in a given project. Exclusive for Super Admin. Access with API Tokens will be blocked."
      },
      "delete": {
        "summary": "Delete Project User",
        "operationId": "auth-project-user-remove",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Auth"
        ],
        "description": "Delete a given user in a given project. Exclusive for Super Admin. Access with API Tokens will be blocked."
      }
    },
    "/api/v1/db/meta/projects/{projectId}/visibility-rules": {
      "get": {
        "summary": "Get UI ACL",
        "operationId": "project-model-visibility-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            }
          }
        },
        "description": "Hide / show views based on user role",
        "tags": [
          "Project"
        ],
        "parameters": [
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "includeM2M"
          }
        ]
      },
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Create UI ACL",
        "operationId": "project-model-visibility-set",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisibilityRuleReq"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "tags": [
          "Project"
        ],
        "description": "Hide / show views based on user role"
      }
    },
    "/api/v1/db/meta/projects/": {
      "parameters": [],
      "get": {
        "summary": "List Projects",
        "operationId": "project-list",
        "responses": {
          "201": {
            "$ref": "#/components/responses/ProjectList"
          }
        },
        "description": "List all project meta data",
        "parameters": [
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "page"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "pageSize"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "sort"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "xc-auth",
            "description": "Auth token"
          }
        ],
        "tags": [
          "Project"
        ]
      },
      "post": {
        "summary": "Create Project",
        "operationId": "project-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectReq"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Project"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "external": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "tags": [
          "Project"
        ],
        "description": "Create a new project"
      }
    },
    "/api/v1/db/meta/projects/{projectId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Project",
        "operationId": "project-read",
        "description": "Get the info of a given projecct",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "xc-auth",
            "description": "Auth token"
          }
        ],
        "tags": [
          "Project"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Project",
        "operationId": "project-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Project"
        ],
        "description": "Delete the given project"
      },
      "patch": {
        "summary": "Update Project",
        "operationId": "project-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Project"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "description": "Update the given project"
      }
    },
    "/api/v1/db/meta/projects/{projectId}/bases/{baseId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "baseId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Base",
        "operationId": "base-read",
        "description": "Get the base details of a given project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "xc-auth",
            "description": "Auth token"
          }
        ],
        "tags": [
          "Base"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Base",
        "operationId": "base-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Base"
        ],
        "description": "Delete the base details of a given project"
      },
      "patch": {
        "summary": "Update Base",
        "operationId": "base-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Base"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "description": "Update the base details of a given project"
      }
    },
    "/api/v1/db/meta/projects/{projectId}/bases/": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List Bases",
        "operationId": "base-list",
        "description": "Get project base list",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "xc-auth",
            "description": "Auth token"
          }
        ],
        "tags": [
          "Base"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Base",
        "operationId": "base-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Base"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Base"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "external": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "tags": [
          "Base"
        ],
        "description": "Create a new base on a given project"
      }
    },
    "/api/v1/db/meta/projects/{projectId}/shared": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Project Shared Base",
        "operationId": "project-shared-base-get",
        "description": "Get Project Shared Base",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "xc-auth",
            "description": "Auth token"
          }
        ],
        "tags": [
          "Project"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "roles": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Project Shared Base",
        "operationId": "project-shared-base-disable",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Project"
        ],
        "description": "Delete Project Shared Base"
      },
      "post": {
        "summary": "Create Project Shared Base",
        "operationId": "project-shared-base-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "$ref": "#/components/schemas/StringOrNull"
                    },
                    "roles": {
                      "$ref": "#/components/schemas/StringOrNull"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Project"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SharedBaseReq"
              }
            }
          }
        },
        "description": "Create Project Shared Base"
      },
      "patch": {
        "summary": "Update Project Shared Base",
        "operationId": "project-shared-base-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "roles": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SharedBaseReq"
              }
            }
          }
        },
        "tags": [
          "Project"
        ],
        "description": "Update Project Shared Base"
      }
    },
    "/api/v1/db/meta/projects/{projectId}/cost": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Project Cost",
        "operationId": "project-cost",
        "description": "Calculate the Project Cost",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "xc-auth",
            "description": "Auth token"
          }
        ],
        "tags": [
          "Project"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-internal": true
      }
    },
    "/api/v1/db/meta/projects/{projectId}/tables": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Create Table",
        "operationId": "db-table-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableReq"
              }
            }
          }
        },
        "tags": [
          "DB Table"
        ],
        "description": "Create a new table in a given project"
      },
      "get": {
        "summary": "List Tables",
        "operationId": "db-table-list",
        "responses": {
          "200": {
            "$ref": "#/components/responses/TableList"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "xc-auth"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "page"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "pageSize"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "sort"
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "includeM2M"
          }
        ],
        "tags": [
          "DB Table"
        ],
        "description": "List all tables in a given project"
      }
    },
    "/api/v1/db/meta/tables/{tableId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "tableId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Read Table",
        "operationId": "db-table-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableInfo"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "id": "string",
                      "fk_project_id": "string",
                      "fk_base_id": "string",
                      "title": "string",
                      "alias": "string",
                      "type": "string",
                      "enabled": "string",
                      "parent_id": "string",
                      "show_as": "string",
                      "tags": "string",
                      "pinned": true,
                      "deleted": true,
                      "order": 0,
                      "column": [
                        {
                          "id": "string",
                          "base_id": "string",
                          "fk_model_id": "string",
                          "title": "string",
                          "alias": "string",
                          "ui_data_type": "string",
                          "data_type": "string",
                          "numeric_precision": "string",
                          "numeric_scale": "string",
                          "character_maximum_length": "string",
                          "column_ordinal_position": "string",
                          "primary_key": "string",
                          "primary_value": "string",
                          "rqd": "string",
                          "un": "string",
                          "column_type": "string",
                          "auto_increment": "string",
                          "unique": "string",
                          "column_default": "string",
                          "column_comment": "string",
                          "character_set_name": "string",
                          "data_type_x": "string",
                          "data_type_x_precision": "string",
                          "data_type_x_scale": "string",
                          "auto_update_timestamp": true,
                          "deleted": true,
                          "visible": true,
                          "order": 0,
                          "colOptions": {
                            "id": "string",
                            "type": "string",
                            "virtual": true,
                            "fk_column_id": "string",
                            "fk_child_column_id": "string",
                            "fk_parent_column_id": "string",
                            "fk_mm_model_id": "string",
                            "fk_mm_child_column_id": "string",
                            "fk_mm_parent_column_id": "string",
                            "ur": "string",
                            "dr": "string",
                            "fk_index_name": "string",
                            "deleted": "string",
                            "order": "string"
                          }
                        }
                      ],
                      "filters": [
                        {
                          "id": "string",
                          "fk_model_id": "string",
                          "fk_column_id": "string",
                          "logical_op": "string",
                          "comparison_op": "string",
                          "value": "string",
                          "is_group": true,
                          "children": [
                            {}
                          ]
                        }
                      ],
                      "sort": [
                        {
                          "id": "string",
                          "fk_model_id": "string",
                          "fk_column_id": "string",
                          "direction": "string",
                          "order": 0
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "DB Table"
        ],
        "description": "Read the table meta data by the given table ID"
      },
      "patch": {
        "summary": "Update Table",
        "operationId": "db-table-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB Table"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "table_name": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "project_id": {
                    "type": "string"
                  },
                  "meta": {
                    "$ref": "#/components/schemas/Meta"
                  }
                }
              }
            }
          }
        },
        "description": "Update the table meta data by the given table ID"
      },
      "delete": {
        "summary": "Delete Table",
        "operationId": "db-table-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB Table"
        ],
        "description": ""
      }
    },
    "/api/v1/db/meta/projects/{projectId}/{baseId}/tables": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "baseId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List Tables",
        "operationId": "table-list",
        "responses": {
          "200": {
            "$ref": "#/components/responses/TableList"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "xc-auth"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "page"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "pageSize"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "sort"
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "includeM2M"
          }
        ],
        "tags": [
          "Base"
        ],
        "description": "List all tables in a given Project and Base"
      },
      "post": {
        "summary": "Create Table",
        "operationId": "table-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableReq"
              }
            }
          }
        },
        "tags": [
          "Base"
        ],
        "description": "Create a new table in a given Project and Base"
      }
    },
    "/api/v1/db/meta/tables/{tableId}/reorder": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "tableId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Reorder Table",
        "operationId": "db-table-reorder",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "order": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "DB Table"
        ],
        "description": "Update the order of the given Table"
      }
    },
    "/api/v1/db/meta/tables/{tableId}/columns": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "tableId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Create Column",
        "operationId": "db-table-column-create",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColumnReq"
              }
            }
          }
        },
        "tags": [
          "DB Table Column"
        ],
        "description": "Create a new column in a given Table"
      }
    },
    "/api/v1/db/meta/columns/{columnId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "columnId",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update Column",
        "operationId": "db-table-column-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Column"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColumnReq"
              }
            }
          }
        },
        "tags": [
          "DB Table Column"
        ],
        "description": "Update the existing column by the given column ID"
      },
      "delete": {
        "summary": "Delete Column",
        "operationId": "db-table-column-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB Table Column"
        ],
        "description": "Delete the existing column by the given column ID"
      },
      "get": {
        "summary": "Get Column",
        "operationId": "db-table-column-get",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB Table Column"
        ],
        "description": "Get the existing column by the given column ID"
      }
    },
    "/api/v1/db/meta/columns/{columnId}/primary": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "columnId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Create Primary Value",
        "operationId": "db-table-column-primary-column-set",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB Table Column"
        ],
        "description": "Set a primary value on a given column"
      }
    },
    "/api/v1/db/meta/tables/{tableId}/views": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "tableId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List views",
        "operationId": "db-view-list",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ViewList"
          }
        },
        "tags": [
          "DB View"
        ],
        "description": "List all views in a given Table."
      }
    },
    "/api/v1/db/meta/views/{viewId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "viewId",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update View",
        "operationId": "db-view-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ViewReq"
              }
            }
          }
        },
        "tags": [
          "DB View"
        ],
        "description": "Update the view with the given view Id."
      },
      "delete": {
        "summary": "Delete View",
        "operationId": "db-view-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB View"
        ],
        "description": "Delete the view with the given view Id."
      }
    },
    "/api/v1/db/meta/views/{viewId}/show-all": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "viewId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Show All Columns In View",
        "operationId": "db-view-show-all-column",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB View"
        ],
        "description": "Show All Columns in a given View",
        "parameters": [
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "ignoreIds"
          }
        ]
      }
    },
    "/api/v1/db/meta/views/{viewId}/hide-all": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "viewId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Hide All Columns In View",
        "operationId": "db-view-hide-all-column",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB View"
        ],
        "parameters": [
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "ignoreIds"
          }
        ],
        "description": "Hide All Columns in a given View"
      }
    },
    "/api/v1/db/meta/tables/{tableId}/share": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "tableId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List Shared Views",
        "operationId": "db-view-share-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            }
          }
        },
        "description": "List all shared views in a given Table",
        "tags": [
          "DB View Share"
        ]
      }
    },
    "/api/v1/db/meta/views/{viewId}/share": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "viewId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Create Shared View",
        "operationId": "db-view-share-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "DB View Share"
        ],
        "description": "Create a shared view in a given View.."
      },
      "patch": {
        "summary": "Update Shared View",
        "operationId": "db-view-share-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedView"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SharedViewReq"
              }
            }
          },
          "description": ""
        },
        "tags": [
          "DB View Share"
        ],
        "description": "Update a shared view in a given View.."
      },
      "delete": {
        "summary": "Delete Shared View",
        "operationId": "db-view-share-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Delete a shared view in a given View.",
        "tags": [
          "DB View Share"
        ]
      }
    },
    "/api/v1/db/meta/views/{viewId}/columns": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "viewId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List Columns In View",
        "operationId": "db-view-column-list",
        "responses": {},
        "tags": [
          "DB View Column"
        ],
        "description": "List all columns by ViewID"
      },
      "post": {
        "summary": "Create Column in View",
        "operationId": "db-view-column-create",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB View Column"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "description": "Create a new column in a given View"
      }
    },
    "/api/v1/db/meta/views/{viewId}/columns/{columnId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "viewId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "columnId",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update View Column",
        "operationId": "db-view-column-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB View Column"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "description": "Update a column in a View"
      }
    },
    "/api/v1/db/meta/views/{viewId}/sorts": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "viewId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List View Sorts",
        "operationId": "db-table-sort-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sorts": {
                      "type": "object",
                      "properties": {
                        "list": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Sort"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "DB Table Sort"
        ],
        "description": "List all the sort data in a given View"
      },
      "post": {
        "summary": "Update View Sort",
        "operationId": "db-table-sort-create",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB Table Sort"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SortReq"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "push_to_top": {
                        "type": "boolean"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "description": "Update the sort data in a given View"
      }
    },
    "/api/v1/db/meta/sorts/{sortId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "sortId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Sort",
        "operationId": "db-table-sort-get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sort"
                }
              }
            }
          }
        },
        "tags": [
          "DB Table Sort"
        ],
        "description": "Get the sort data by Sort ID"
      },
      "patch": {
        "summary": "Update Sort",
        "operationId": "db-table-sort-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB Table Sort"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SortReq"
              }
            }
          }
        },
        "description": "Update the sort data by Sort ID"
      },
      "delete": {
        "summary": "Delete Sort",
        "operationId": "db-table-sort-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB Table Sort"
        ],
        "description": "Delete the sort data by Sort ID"
      }
    },
    "/api/v1/db/meta/views/{viewId}/filters": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "viewId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get View Filter",
        "operationId": "db-table-filter-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Filter"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "DB Table Filter"
        ],
        "description": "Get the filter data in a given View"
      },
      "post": {
        "summary": "Create View Filter",
        "operationId": "db-table-filter-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          }
        },
        "tags": [
          "DB Table Filter"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterReq"
              }
            }
          }
        },
        "description": "Update the filter data in a given View"
      }
    },
    "/api/v1/db/meta/hooks/{hookId}/filters": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "hookId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Hook Filter",
        "operationId": "db-table-webhook-filter-read",
        "responses": {
          "200": {
            "$ref": "#/components/responses/FilterList"
          }
        },
        "tags": [
          "DB Table Hook Filter"
        ],
        "description": "Get the filter data in a given Hook"
      },
      "post": {
        "summary": "Create Hook Filter",
        "operationId": "db-table-webhook-filter-create",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB Table Hook Filter"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterReq"
              }
            }
          }
        },
        "description": "Create filter(s) in a given Hook"
      }
    },
    "/api/v1/db/meta/filters/{filterId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "filterId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Filter",
        "operationId": "db-table-filter-get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          }
        },
        "tags": [
          "DB Table Filter"
        ],
        "description": "Get the filter data with a given Filter ID"
      },
      "patch": {
        "summary": "Update Filter",
        "operationId": "db-table-filter-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB Table Filter"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterReq"
              }
            }
          }
        },
        "description": "Update the filter data with a given Filter ID"
      },
      "delete": {
        "summary": "Delete Filter",
        "operationId": "db-table-filter-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB Table Filter"
        ],
        "description": "Delete the filter data with a given Filter ID"
      }
    },
    "/api/v1/db/meta/filters/{filterGroupId}/children": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "filterGroupId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Filter Group Children",
        "operationId": "db-table-filter-children-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Filter"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "DB Table Filter"
        ],
        "description": "Get Filter Group Children of a given group ID"
      }
    },
    "/api/v1/db/meta/tables/{tableId}/grids": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "tableId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Create Grid View",
        "operationId": "db-view-grid-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Grid"
                }
              }
            }
          }
        },
        "tags": [
          "DB View"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GridReq"
              }
            }
          }
        },
        "description": "Create a new grid view in a given Table"
      }
    },
    "/api/v1/db/meta/tables/{tableId}/forms": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "tableId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Create Form View",
        "operationId": "db-view-form-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Form"
                }
              }
            }
          }
        },
        "description": "Create a new form view in a given Table",
        "tags": [
          "DB View"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormCreateReq"
              }
            }
          }
        }
      }
    },
    "/api/v1/db/meta/forms/{formId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "formId",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update Form",
        "operationId": "db-view-form-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB View"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormReq"
              }
            }
          }
        },
        "description": "Update the form data by Form ID"
      },
      "get": {
        "summary": "Get Form",
        "operationId": "db-view-form-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Form"
                }
              }
            }
          }
        },
        "tags": [
          "DB View"
        ],
        "description": "Get the form data by Form ID"
      }
    },
    "/api/v1/db/meta/form-columns/{formViewColumnId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "formViewColumnId",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update Form Column",
        "operationId": "db-view-form-column-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormColumnReq"
                }
              }
            }
          }
        },
        "tags": [
          "DB View"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormColumnReq"
              }
            }
          }
        },
        "description": "Update the form column(s) by Form View Column ID"
      }
    },
    "/api/v1/db/meta/grids/{viewId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "viewId",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update Grid View",
        "operationId": "db-view-grid-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB View"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Grid"
              }
            }
          }
        },
        "description": "Update Grid View"
      }
    },
    "/api/v1/db/meta/grids/{gridId}/grid-columns": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "gridId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List Grid Columns",
        "operationId": "db-view-grid-columns-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GridColumn"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "DB View"
        ],
        "description": "List all columns in the given Grid"
      }
    },
    "/api/v1/db/meta/grid-columns/{columnId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "columnId",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update Grid Column",
        "operationId": "db-view-grid-column-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB View"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GridColumnReq"
              }
            }
          }
        },
        "description": "Update grid column(s) in the given Grid"
      }
    },
    "/api/v1/db/meta/tables/{tableId}/galleries": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "tableId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Gallery View",
        "operationId": "db-view-gallery-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "DB View"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GalleryReq"
              }
            }
          }
        }
      }
    },
    "/api/v1/db/meta/galleries/{galleryId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "galleryId",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update Gallery View",
        "operationId": "db-view-gallery-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB View"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GalleryReq"
              }
            }
          }
        },
        "description": "Update the Gallery View data with Gallery ID"
      },
      "get": {
        "summary": "Get Gallery View",
        "operationId": "db-view-gallery-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Gallery"
                }
              }
            }
          }
        },
        "tags": [
          "DB View"
        ],
        "description": "Get the Gallery View data with Gallery ID"
      }
    },
    "/api/v1/db/meta/tables/{tableId}/kanbans": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "tableId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Create Kanban View",
        "operationId": "db-view-kanban-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "DB View"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KanbanReq"
              }
            }
          }
        },
        "description": "Create a new Kanban View"
      }
    },
    "/api/v1/db/meta/kanbans/{kanbanId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "kanbanId",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update Kanban View",
        "operationId": "db-view-kanban-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB View"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KanbanUpdateReq"
              }
            }
          }
        },
        "description": "Update the Kanban View data with Kanban ID"
      },
      "get": {
        "summary": "Get Kanban View",
        "operationId": "db-view-kanban-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Kanban"
                }
              }
            }
          }
        },
        "tags": [
          "DB View"
        ],
        "description": "Get the Kanban View data by Kanban ID"
      }
    },
    "/api/v1/db/meta/tables/{tableId}/maps": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "tableId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Create Map View",
        "operationId": "db-view-map-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "DB View"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Map"
              }
            }
          }
        },
        "description": "Create a new Map View"
      }
    },
    "/api/v1/db/meta/maps/{mapId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "mapId",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update Map View",
        "operationId": "db-view-map-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB View"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Map"
              }
            }
          }
        },
        "description": "Update the Map View data by Map ID"
      },
      "get": {
        "summary": "Get Map View",
        "operationId": "db-view-map-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Map"
                }
              }
            }
          }
        },
        "tags": [
          "DB View"
        ],
        "description": "Get the Map View data by Map ID"
      }
    },
    "/api/v1/db/meta/projects/{projectId}/meta-diff": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Sync Meta",
        "operationId": "project-meta-diff-sync",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Project"
        ],
        "description": "Synchronise the meta data difference between NC_DB and external data sources "
      },
      "get": {
        "summary": "Meta Diff",
        "operationId": "project-meta-diff-get",
        "parameters": [],
        "tags": [
          "Project"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "description": "Get the meta data difference between NC_DB and external data sources "
      }
    },
    "/api/v1/db/meta/projects/{projectId}/meta-diff/{baseId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "baseId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Synchronise Base Meta",
        "operationId": "base-meta-diff-sync",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Base"
        ],
        "description": "Synchronise the meta data difference between NC_DB and external data sources in a given Base"
      },
      "get": {
        "summary": "Base Meta Diff",
        "operationId": "base-meta-diff-get",
        "parameters": [],
        "tags": [
          "Base"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "description": "Get the meta data difference between NC_DB and external data sources in a given Base"
      }
    },
    "/api/v1/db/meta/projects/{projectId}/has-empty-or-null-filters": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List Empty & Null Filter",
        "operationId": "project-has-empty-or-null-filters",
        "parameters": [],
        "tags": [
          "Project"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "description": "Check if a project contains empty and null filters. Used in `Show NULL and EMPTY in Filter` in Project Setting.",
        "x-internal": true
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List Table Rows",
        "operationId": "db-table-row-list",
        "description": "List all table rows in a given table and project",
        "tags": [
          "DB Table Row"
        ],
        "parameters": [
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "fields"
          },
          {
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "in": "query",
            "name": "sort"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "where"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "offset",
            "description": "Offset in rows"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "limit",
            "description": "Limit in rows"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Table Row",
        "operationId": "db-table-row-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB Table Row"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "description": "Create a new row in a given table and project."
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}/find-one": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Find One Table Row",
        "operationId": "db-table-row-find-one",
        "description": "Return the first result of the target Table Row",
        "tags": [
          "DB Table Row"
        ],
        "parameters": [
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "fields"
          },
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "sort"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "where"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}/groupby": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "in": "query",
          "name": "column_name",
          "description": "Column name of the column you want to group by, eg. `column_name=column1`"
        }
      ],
      "get": {
        "summary": "Group By Table Row",
        "operationId": "db-table-row-group-by",
        "description": "Get the result grouped by the given query",
        "tags": [
          "DB Table Row"
        ],
        "parameters": [
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "sort"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "where"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}/group/{columnId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "viewName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "columnId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Table Group by Column",
        "operationId": "db-view-row-grouped-data-list",
        "description": "Get the grouped data By Column ID. Used in Kanban View.",
        "tags": [
          "DB View Row"
        ],
        "parameters": [
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "fields"
          },
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "sort"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "where"
          },
          {
            "schema": {},
            "in": "query",
            "name": "nested",
            "description": "Query params for nested data"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}/group/{columnId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "columnId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Table Group by Column",
        "operationId": "db-table-row-grouped-data-list",
        "description": "Get the grouped data By Column ID. Used in Kanban View.",
        "tags": [
          "DB Table Row"
        ],
        "parameters": [
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "fields"
          },
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "sort"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "where"
          },
          {
            "schema": {},
            "in": "query",
            "name": "nested",
            "description": "Query params for nested data"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "viewName",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List Table View Rows",
        "operationId": "db-view-row-list",
        "description": "List all table view rows",
        "tags": [
          "DB View Row"
        ],
        "parameters": [
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "fields"
          },
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "sort"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "where"
          },
          {
            "schema": {},
            "in": "query",
            "name": "nested",
            "description": "Query params for nested data"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Table View Row",
        "operationId": "db-view-row-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB View Row"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "description": "Create a new row in the given Table View"
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}/find-one": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "viewName",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Find One Table View Row",
        "operationId": "db-view-row-find-one",
        "description": "Return the first result of table view rows with the given query",
        "tags": [
          "DB View Row"
        ],
        "parameters": [
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "fields"
          },
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "sort"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "where"
          },
          {
            "schema": {},
            "in": "query",
            "name": "nested",
            "description": "Query params for nested data"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}/groupby": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "viewName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "in": "query",
          "name": "column_name",
          "description": "Column name of the column you want to group by, eg. `column_name=column1`"
        }
      ],
      "get": {
        "summary": "Group By Table View Row",
        "operationId": "db-view-row-group-by",
        "description": "Get the table view rows groupe by the given query",
        "tags": [
          "DB View Row"
        ],
        "parameters": [
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "sort"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "where"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}/count": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "viewName",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Count Table View Rows",
        "operationId": "db-view-row-count",
        "description": "Count how many rows in the given Table View",
        "tags": [
          "DB View Row"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "where"
          },
          {
            "schema": {},
            "in": "query",
            "name": "nested",
            "description": "Query params for nested data"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}/{rowId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "viewName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "rowId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Table View Row",
        "operationId": "db-view-row-read",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "description": "Get the target Table View Row",
        "tags": [
          "DB View Row"
        ]
      },
      "patch": {
        "summary": "Update Table View Row",
        "operationId": "db-view-row-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB View Row"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "description": "Update the target Table View Row"
      },
      "delete": {
        "summary": "Delete Table View Row",
        "operationId": "db-view-row-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB View Row"
        ],
        "description": "Delete the target Table View Row"
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}/{rowId}/exist": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "viewName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "rowId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Does Table View Row Exist",
        "operationId": "db-view-row-exist",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "description": "Check row with provided primary key exists or not",
        "tags": [
          "DB View Row"
        ]
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}/{rowId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "rowId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Table Row",
        "operationId": "db-table-row-read",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "description": "Get the Table Row",
        "tags": [
          "DB Table Row"
        ]
      },
      "patch": {
        "summary": "Update Table Row",
        "operationId": "db-table-row-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB Table Row"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "description": "Update the Table Row"
      },
      "delete": {
        "summary": "Delete Table Row",
        "operationId": "db-table-row-delete",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB Table Row"
        ],
        "description": "Delete the Table Row"
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}/{rowId}/exist": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "rowId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Does Table Row Exist",
        "operationId": "db-table-row-exist",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "description": "check row with provided primary key exists or not",
        "tags": [
          "DB Table Row"
        ]
      }
    },
    "/api/v1/db/data/bulk/{orgs}/{projectName}/{tableName}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Bulk Insert Table Rows",
        "operationId": "db-table-row-bulk-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB Table Row"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "description": "Bulk insert table rows in one go."
      },
      "patch": {
        "summary": "Bulk Update Table Rows by IDs",
        "operationId": "db-table-row-bulk-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB Table Row"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "description": "Bulk Update Table Rows by given IDs"
      },
      "delete": {
        "summary": "Bulk Delete Table Rows by IDs",
        "operationId": "db-table-row-bulk-delete",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB Table Row"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "description": "Bulk Delete Table Rows by given IDs"
      }
    },
    "/api/v1/db/data/bulk/{orgs}/{projectName}/{tableName}/all": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "in": "query",
          "name": "where"
        }
      ],
      "patch": {
        "summary": "Bulk Update Table Rows with Conditions",
        "operationId": "db-table-row-bulk-update-all",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB Table Row"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "description": "Bulk Update all Table Rows if the condition is true"
      },
      "delete": {
        "summary": "Bulk Delete Table Rows with Conditions",
        "operationId": "db-table-row-bulk-delete-all",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB Table Row"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "description": "Bulk Delete all Table Rows if the condition is true"
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}/export/{type}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "viewName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string",
            "enum": [
              "csv",
              "excel"
            ]
          },
          "name": "type",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Export Table View Rows",
        "operationId": "db-view-row-export",
        "description": "Export Table View Rows by CSV or Excel",
        "tags": [
          "DB View Row"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {}
              }
            },
            "headers": {
              "nc-export-offset": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}/export/{type}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string",
            "enum": [
              "csv",
              "excel"
            ]
          },
          "name": "type",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Export Table View Rows",
        "operationId": "db-table-row-csv-export",
        "description": "Export Table View Rows by CSV or Excel",
        "tags": [
          "DB Table Row"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {}
              }
            },
            "headers": {
              "nc-export-offset": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}/{rowId}/{relationType}/{columnName}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "rowId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string",
            "enum": [
              "mm",
              "hm",
              "bt"
            ]
          },
          "name": "relationType",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "columnName",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List Nested Relations Rows",
        "operationId": "db-table-row-nested-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB Table Row"
        ],
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "offset"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "where"
          }
        ],
        "description": "List all nested relations rows"
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}/{rowId}/{relationType}/{columnName}/{refRowId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "rowId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string",
            "enum": [
              "mm",
              "hm",
              "bt"
            ]
          },
          "name": "relationType",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "columnName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "refRowId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Create Nested Relations Row",
        "operationId": "db-table-row-nested-add",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB Table Row"
        ],
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "offset"
          }
        ],
        "description": "Create a new nested relations row"
      },
      "delete": {
        "summary": "Delete Nested Relations Row",
        "operationId": "db-table-row-nested-remove",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB Table Row"
        ],
        "description": "Delete a new nested relations row"
      }
    },
    "/api/v1/db/data/{orgs}/{projectName}/{tableName}/{rowId}/{relationType}/{columnName}/exclude": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgs",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "rowId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string",
            "enum": [
              "mm",
              "hm",
              "bt"
            ]
          },
          "name": "relationType",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "columnName",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Referenced Table Rows Excluding Current Record's Children / Parent",
        "operationId": "db-table-row-nested-children-excluded-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB Table Row"
        ],
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "offset"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "where"
          }
        ],
        "description": "Get the table rows but exculding the current record's children and parent"
      }
    },
    "/api/v1/db/public/shared-view/{sharedViewUuid}/group/{columnId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "sharedViewUuid",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "columnId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "in": "header",
          "name": "xc-password",
          "description": "Shared view password"
        }
      ],
      "get": {
        "summary": "List Shared View Grouped Data",
        "operationId": "public-grouped-data-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Public"
        ],
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "offset"
          }
        ],
        "description": "List Shared View Grouped Data"
      }
    },
    "/api/v1/db/public/shared-view/{sharedViewUuid}/rows": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "sharedViewUuid",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "in": "header",
          "name": "xc-password",
          "description": "Shared view password"
        }
      ],
      "get": {
        "summary": "List Shared View Rows",
        "operationId": "public-data-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Public"
        ],
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "offset"
          }
        ],
        "description": "List all shared view rows"
      },
      "post": {
        "summary": "Create Share View Row",
        "operationId": "public-data-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "tags": [
          "Public"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header"
          }
        ],
        "description": "Create a new row for the target shared view"
      }
    },
    "/api/v1/db/public/shared-view/{sharedViewUuid}/rows/{rowId}/{relationType}/{columnName}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "sharedViewUuid",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "rowId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string",
            "enum": [
              "mm",
              "hm",
              "bt"
            ]
          },
          "name": "relationType",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "columnName",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List Nested List Data",
        "operationId": "public-data-nested-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Public"
        ],
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "offset"
          }
        ],
        "description": "List all nested list data in a given shared view"
      }
    },
    "/api/v1/db/public/shared-view/{sharedViewUuid}/rows/export/{type}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "sharedViewUuid",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string",
            "enum": [
              "csv",
              "excel"
            ]
          },
          "name": "type",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Export Rows in Share View",
        "operationId": "public-csv-export",
        "description": "Export all rows in Share View in a CSV / Excel Format",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {}
              }
            },
            "headers": {
              "nc-export-offset": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "tags": [
          "Public"
        ]
      }
    },
    "/api/v1/db/public/shared-view/{sharedViewUuid}/nested/{columnName}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "sharedViewUuid",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "columnName",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "in": "header",
          "name": "xc-password",
          "description": "Shared view password"
        }
      ],
      "get": {
        "summary": "List Nested Data Relation",
        "operationId": "public-data-relation-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "offset"
          }
        ],
        "tags": [
          "Public"
        ],
        "description": "List Nested Data Relation"
      }
    },
    "/api/v1/db/public/shared-base/{sharedBaseUuid}/meta": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "sharedBaseUuid",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Share Base Meta",
        "operationId": "public-shared-base-get",
        "description": "Get Share Base Meta",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "project_id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Public"
        ]
      }
    },
    "/api/v1/db/public/shared-view/{sharedViewUuid}/meta": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "sharedViewUuid",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "in": "header",
          "name": "xc-password",
          "description": "Shared view password"
        }
      ],
      "get": {
        "summary": "Get Share View Meta",
        "operationId": "public-shared-view-meta-get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/View"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "relatedMetas": {},
                        "client": {
                          "type": "string"
                        },
                        "base_id": {
                          "type": "string"
                        },
                        "columns": {
                          "allOf": [
                            {
                              "anyOf": [
                                {
                                  "$ref": "#/components/schemas/GridColumn"
                                },
                                {
                                  "$ref": "#/components/schemas/FormColumn"
                                },
                                {
                                  "$ref": "#/components/schemas/GalleryColumn"
                                }
                              ]
                            },
                            {
                              "$ref": "#/components/schemas/Column"
                            }
                          ]
                        },
                        "model": {
                          "$ref": "#/components/schemas/Table"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "view": {
                          "anyOf": [
                            {
                              "$ref": "#/components/schemas/Form"
                            },
                            {
                              "$ref": "#/components/schemas/Grid"
                            },
                            {
                              "$ref": "#/components/schemas/Gallery"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "application/xml": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Public"
        ],
        "description": "Get Share View Meta",
        "parameters": []
      }
    },
    "/api/v1/db/meta/audits/comments": {
      "parameters": [],
      "get": {
        "summary": "List Comments in Audit",
        "operationId": "utils-comment-list",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "description": "List all comments",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "row_id",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/components/schemas/Id"
            },
            "in": "query",
            "name": "fk_model_id",
            "required": true
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "comments_only"
          }
        ],
        "tags": [
          "Utils"
        ]
      },
      "post": {
        "summary": "",
        "operationId": "utils-comment-row",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentReq"
              }
            }
          }
        },
        "tags": [
          "Utils"
        ],
        "description": "Create a new comment for Audit"
      }
    },
    "/api/v1/db/meta/audits/comments/count": {
      "parameters": [],
      "get": {
        "summary": "Count Comments",
        "operationId": "utils-comment-count",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "description": "Return the number of comments in the given query.",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/components/schemas/Id"
            },
            "in": "query",
            "name": "fk_model_id",
            "required": true
          }
        ],
        "tags": [
          "Utils"
        ]
      }
    },
    "/api/v1/db/meta/projects/{projectId}/audits": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List Audits in Project",
        "operationId": "project-audit-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "list": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "$ref": "#/components/schemas/Audit"
                      }
                    },
                    "pageInfo": {
                      "$ref": "#/components/schemas/Paginated"
                    }
                  },
                  "required": [
                    "list",
                    "pageInfo"
                  ]
                }
              }
            }
          }
        },
        "description": "List all audit data in the given project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "offset"
          },
          {
            "schema": {
              "type": "integer",
              "maximum": 1
            },
            "in": "query",
            "name": "limit"
          }
        ],
        "tags": [
          "Project"
        ]
      }
    },
    "/api/v1/db/meta/audits/rows/{rowId}/update": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "rowId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Update Audit Row",
        "operationId": "utils-audit-row-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Utils"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditRowUpdateReq"
              }
            }
          }
        },
        "description": "Update Audit Row"
      }
    },
    "/api/v1/db/meta/tables/{tableId}/hooks": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "tableId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List Table Hooks",
        "operationId": "db-table-webhook-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "list": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "$ref": "#/components/schemas/Hook"
                      }
                    },
                    "pageInfo": {
                      "$ref": "#/components/schemas/Paginated"
                    }
                  },
                  "required": [
                    "list",
                    "pageInfo"
                  ]
                }
              }
            }
          }
        },
        "description": "List all hook records in the given Table",
        "parameters": [],
        "tags": [
          "DB Table Webhook"
        ]
      },
      "post": {
        "summary": "Create Table Hook",
        "operationId": "db-table-webhook-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Audit"
                }
              }
            }
          }
        },
        "description": "Create a hook in the given table",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Audit"
              }
            }
          }
        },
        "tags": [
          "DB Table Webhook"
        ]
      }
    },
    "/api/v1/db/meta/tables/{tableId}/hooks/test": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "tableId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Test Hook",
        "operationId": "db-table-webhook-test",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "DB Table Webhook"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HookTestReq"
              }
            }
          }
        },
        "description": "Test the hook in the given Table"
      }
    },
    "/api/v1/db/meta/tables/{tableId}/hooks/samplePayload/{operation}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "tableId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string",
            "enum": [
              "update",
              "delete",
              "insert"
            ]
          },
          "name": "operation",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Sample Hook Payload",
        "operationId": "db-table-webhook-sample-payload-get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plugins": {
                      "type": "object",
                      "properties": {
                        "list": {
                          "type": "array",
                          "uniqueItems": true,
                          "minItems": 1,
                          "items": {
                            "$ref": "#/components/schemas/Plugin"
                          }
                        },
                        "pageInfo": {
                          "$ref": "#/components/schemas/Paginated"
                        }
                      },
                      "required": [
                        "list",
                        "pageInfo"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Get the sample hook payload",
        "parameters": [],
        "tags": [
          "DB Table Webhook"
        ]
      }
    },
    "/api/v1/db/meta/hooks/{hookId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "hookId",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update Hook",
        "operationId": "db-table-webhook-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            }
          }
        },
        "tags": [
          "DB Table Webhook"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Hook"
              }
            }
          }
        },
        "description": "Update the exsiting hook by its ID"
      },
      "delete": {
        "summary": "Delete Hook",
        "operationId": "db-table-webhook-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DB Table Webhook"
        ],
        "description": "Delete the exsiting hook by its ID"
      }
    },
    "/api/v1/db/meta/plugins": {
      "parameters": [],
      "get": {
        "summary": "List Plugins",
        "operationId": "plugin-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "list": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "$ref": "#/components/schemas/Plugin"
                      }
                    },
                    "pageInfo": {
                      "$ref": "#/components/schemas/Paginated"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "List all plugins",
        "parameters": [],
        "tags": [
          "Plugin"
        ]
      }
    },
    "/api/v1/db/meta/plugins/{pluginTitle}/status": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "pluginTitle",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Plugin Status",
        "operationId": "plugin-status",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "description": "Check plugin is active or not",
        "parameters": [],
        "tags": [
          "Plugin"
        ]
      }
    },
    "/api/v1/db/meta/plugins/test": {
      "parameters": [],
      "post": {
        "summary": "Test Plugin",
        "operationId": "plugin-test",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Test if the plugin is working with the given configurations",
        "parameters": [],
        "tags": [
          "Plugin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PluginTestReq"
              }
            }
          }
        }
      }
    },
    "/api/v1/db/meta/plugins/{pluginId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "pluginId",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update Plugin",
        "operationId": "plugin-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Plugin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PluginReq"
              }
            }
          }
        },
        "description": "Update the plugin data by ID"
      },
      "get": {
        "summary": "Get Plugin",
        "operationId": "plugin-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            }
          }
        },
        "tags": [
          "Plugin"
        ],
        "description": "Get the plugin data by ID"
      }
    },
    "/api/v1/db/meta/connection/test": {
      "parameters": [],
      "post": {
        "summary": "Test DB Connection",
        "operationId": "utils-test-connection",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Utils"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "description": "Test the DB Connection"
      }
    },
    "/api/v1/url_to_config": {
      "parameters": [],
      "post": {
        "summary": "Convert JDBC URL to Config",
        "operationId": "utils-url-to-config",
        "tags": [
          "Utils"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "description": "Extract XC URL From JDBC and parse to connection config"
      }
    },
    "/api/v1/db/meta/nocodb/info": {
      "parameters": [],
      "get": {
        "summary": "Get App Info",
        "operationId": "utils-app-info",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Utils"
        ],
        "description": "Get the application info such as authType, defaultLimit, version and etc."
      }
    },
    "/api/v1/db/meta/axiosRequestMake": {
      "parameters": [],
      "post": {
        "summary": "Axios Request",
        "operationId": "utils-axios-request-make",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "description": "Generic Axios Call",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "tags": [
          "Utils"
        ],
        "x-internal": true
      }
    },
    "/api/v1/version": {
      "parameters": [],
      "get": {
        "summary": "Get App Version",
        "operationId": "utils-app-version",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Utils"
        ],
        "description": "Get the application version"
      }
    },
    "/api/v1/health": {
      "parameters": [],
      "get": {
        "summary": "Get Application Health Status",
        "operationId": "utils-app-health",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Utils"
        ],
        "description": "Get Application Health Status"
      }
    },
    "/api/v1/aggregated-meta-info": {
      "parameters": [],
      "get": {
        "summary": "Get Aggregated Meta Info",
        "operationId": "utils-aggregated-meta-info",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projectCount": {
                      "type": "integer"
                    },
                    "projects": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tableCount": {
                            "type": "object",
                            "properties": {
                              "table": {
                                "type": "integer"
                              },
                              "view": {
                                "type": "integer"
                              }
                            }
                          },
                          "external": {
                            "type": "boolean"
                          },
                          "viewCount": {
                            "type": "object",
                            "properties": {
                              "formCount": {
                                "type": "integer"
                              },
                              "gridCount": {
                                "type": "integer"
                              },
                              "galleryCount": {
                                "type": "integer"
                              },
                              "kanbanCount": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "sharedFormCount": {
                                "type": "integer"
                              },
                              "sharedGridCount": {
                                "type": "integer"
                              },
                              "sharedGalleryCount": {
                                "type": "integer"
                              },
                              "sharedKanbanCount": {
                                "type": "integer"
                              },
                              "sharedTotal": {
                                "type": "integer"
                              },
                              "sharedLockedCount": {
                                "type": "integer"
                              }
                            }
                          },
                          "webhookCount": {
                            "type": "integer"
                          },
                          "filterCount": {
                            "type": "integer"
                          },
                          "sortCount": {
                            "type": "integer"
                          },
                          "rowCount": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "TotalRecords": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "userCount": {
                            "type": "integer"
                          }
                        }
                      }
                    },
                    "userCount": {
                      "type": "integer"
                    },
                    "sharedBaseCount": {
                      "type": "integer"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "projectCount": 1,
                      "projects": [
                        {
                          "tableCount": {
                            "table": 3,
                            "view": 0
                          },
                          "external": false,
                          "viewCount": {
                            "formCount": 0,
                            "gridCount": 3,
                            "galleryCount": 0,
                            "kanbanCount": 0,
                            "total": 3,
                            "sharedFormCount": 0,
                            "sharedGridCount": 0,
                            "sharedGalleryCount": 0,
                            "sharedKanbanCount": 0,
                            "sharedTotal": 0,
                            "sharedLockedCount": 0
                          },
                          "webhookCount": 0,
                          "filterCount": 0,
                          "sortCount": 0,
                          "rowCount": [
                            {
                              "TotalRecords": "76"
                            }
                          ],
                          "userCount": 1
                        }
                      ],
                      "userCount": 1,
                      "sharedBaseCount": 0
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "projectCount": 1,
                      "projects": [
                        {
                          "tableCount": {
                            "table": 3,
                            "view": 0
                          },
                          "external": false,
                          "viewCount": {
                            "formCount": 0,
                            "gridCount": 3,
                            "galleryCount": 0,
                            "kanbanCount": 0,
                            "total": 3,
                            "sharedFormCount": 0,
                            "sharedGridCount": 0,
                            "sharedGalleryCount": 0,
                            "sharedKanbanCount": 0,
                            "sharedTotal": 0,
                            "sharedLockedCount": 0
                          },
                          "webhookCount": 0,
                          "filterCount": 0,
                          "sortCount": 0,
                          "rowCount": [
                            {
                              "TotalRecords": "76"
                            }
                          ],
                          "userCount": 1
                        }
                      ],
                      "userCount": 1,
                      "sharedBaseCount": 0
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projectCount": {
                      "type": "integer"
                    },
                    "projects": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tableCount": {
                            "type": "object",
                            "properties": {
                              "table": {
                                "type": "integer"
                              },
                              "view": {
                                "type": "integer"
                              }
                            }
                          },
                          "viewCount": {
                            "type": "object",
                            "properties": {
                              "formCount": {
                                "type": "integer"
                              },
                              "gridCount": {
                                "type": "integer"
                              },
                              "galleryCount": {
                                "type": "integer"
                              },
                              "kanbanCount": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "sharedFormCount": {
                                "type": "integer"
                              },
                              "sharedGridCount": {
                                "type": "integer"
                              },
                              "sharedGalleryCount": {
                                "type": "integer"
                              },
                              "sharedKanbanCount": {
                                "type": "integer"
                              },
                              "sharedTotal": {
                                "type": "integer"
                              },
                              "sharedLockedCount": {
                                "type": "integer"
                              }
                            }
                          },
                          "webhookCount": {
                            "type": "integer"
                          },
                          "filterCount": {
                            "type": "integer"
                          },
                          "sortCount": {
                            "type": "integer"
                          },
                          "rowCount": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "TotalRecords": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "userCount": {
                            "type": "integer"
                          }
                        }
                      }
                    },
                    "userCount": {
                      "type": "integer"
                    },
                    "sharedBaseCount": {
                      "type": "integer"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "projectCount": 1,
                      "projects": [
                        {
                          "tableCount": {
                            "table": 3,
                            "view": 0
                          },
                          "viewCount": {
                            "formCount": 0,
                            "gridCount": 3,
                            "galleryCount": 0,
                            "kanbanCount": 0,
                            "total": 3,
                            "sharedFormCount": 0,
                            "sharedGridCount": 0,
                            "sharedGalleryCount": 0,
                            "sharedKanbanCount": 0,
                            "sharedTotal": 0,
                            "sharedLockedCount": 0
                          },
                          "webhookCount": 0,
                          "filterCount": 0,
                          "sortCount": 0,
                          "rowCount": [
                            {
                              "TotalRecords": "76"
                            }
                          ],
                          "userCount": 1
                        }
                      ],
                      "userCount": 1,
                      "sharedBaseCount": 0
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Utils"
        ],
        "description": "Get Aggregated Meta Info such as tableCount, dbViewCount, viewCount and etc."
      }
    },
    "/api/v1/db/meta/cache": {
      "get": {
        "summary": "Get Cache",
        "tags": [
          "Utils"
        ],
        "responses": {},
        "operationId": "utils-cache-get",
        "description": "Get All K/V pairs in NocoCache"
      },
      "delete": {
        "summary": "Delete Cache",
        "operationId": "utils-cache-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Delete All K/V pairs in NocoCache",
        "tags": [
          "Utils"
        ]
      },
      "parameters": []
    },
    "/api/v1/db/meta/projects/{projectId}/api-tokens": {
      "get": {
        "summary": "List API Tokens in Project",
        "tags": [
          "API Token"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiToken"
                  }
                }
              }
            }
          }
        },
        "operationId": "api-token-list",
        "description": "List API Tokens in the given project"
      },
      "post": {
        "summary": "Create API Token",
        "operationId": "api-token-create",
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTokenReq"
              }
            }
          }
        },
        "tags": [
          "API Token"
        ],
        "description": "Create API Token in a project"
      },
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v1/db/meta/projects/{projectId}/api-tokens/{token}": {
      "delete": {
        "summary": "Delete API Token",
        "operationId": "api-token-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "API Token"
        ],
        "description": "Delete the given API Token in project"
      },
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "token",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v1/db/storage/upload": {
      "post": {
        "summary": "Attachment Upload",
        "operationId": "storage-upload",
        "responses": {},
        "tags": [
          "Storage"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {},
                  "json": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": ""
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "description": "Upload attachment"
      }
    },
    "/api/v1/db/storage/upload-by-url": {
      "post": {
        "summary": "Attachment Upload by URL",
        "operationId": "storage-upload-by-url",
        "responses": {},
        "tags": [
          "Storage"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string"
                    },
                    "fileName": {
                      "type": "string"
                    },
                    "mimetype": {
                      "type": "string"
                    },
                    "size": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "description": "Upload attachment by URL. Used in Airtable Migration."
      }
    },
    "/api/v1/db/meta/projects/{projectId}/users/{userId}/resend-invite": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "$ref": "#/components/schemas/Id"
          },
          "name": "userId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Resend User Invitation",
        "operationId": "auth-project-user-resend-invite",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Auth"
        ],
        "description": "Resend Invitation to a specific user"
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "title": "User Model",
        "type": "object",
        "examples": [
          {
            "id": "us_8kugj628ebjngs",
            "firstName": "Alice",
            "lastName": "Smith",
            "email": "alice.smith@nocodb.com",
            "roles": "org-level-viewer",
            "email_verified": true,
            "created_at": "2023-03-01 11:36:49",
            "updated_at": "2023-03-01 11:36:49"
          }
        ],
        "x-internal": false,
        "description": "Model for User",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the given user.",
            "example": "us_8kugj628ebjngs"
          },
          "firstname": {
            "type": "string",
            "description": "The first name of the user",
            "example": "Alice"
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the user",
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email of the user",
            "example": "alice.smith@nocodb.com"
          },
          "roles": {
            "type": "string",
            "description": "The roles of the user",
            "example": "org-level-viewer"
          },
          "email_verified": {
            "type": "boolean",
            "description": "Set to true if the user's email has been verified."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date that the user was created.",
            "example": "2023-03-01 11:36:49"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date that the user was created.",
            "example": "2023-03-01 11:36:49"
          }
        },
        "required": [
          "id",
          "firstname",
          "lastname",
          "email",
          "email_verified"
        ]
      },
      "UserList": {
        "type": "object",
        "x-examples": {
          "example-1": {
            "bases": {
              "list": [
                {
                  "id": "string",
                  "project_id": "string",
                  "alias": "string",
                  "host": "string",
                  "port": 0,
                  "username": "string",
                  "password": "string",
                  "database": "string",
                  "url": "string",
                  "params": "string",
                  "type": "string",
                  "ssl": "string"
                }
              ],
              "pageInfo": {
                "pageSize": 0,
                "totalRows": 0,
                "sort": "string",
                "isFirstPage": true,
                "isLastPage": true
              }
            }
          }
        },
        "title": "User List Model",
        "description": "Model for User List",
        "properties": {
          "users": {
            "type": "object",
            "required": [
              "list",
              "pageInfo"
            ],
            "description": "users includes `list` and `pageInfo`",
            "properties": {
              "list": {
                "$ref": "#/components/schemas/User",
                "description": "List of User objects"
              },
              "pageInfo": {
                "$ref": "#/components/schemas/Paginated",
                "description": "Pagination info"
              }
            }
          }
        },
        "required": [
          "users"
        ]
      },
      "ProjectReq": {
        "title": "Project Request Model",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128,
            "description": "Project Title",
            "example": "My Project"
          },
          "description": {
            "type": "string",
            "description": "Project Description",
            "example": "This is my project description"
          },
          "color": {
            "type": "string",
            "maxLength": 50,
            "example": "#24716E",
            "description": "Primary Theme Color"
          },
          "bases": {
            "type": "array",
            "description": "Array of Bases",
            "items": {
              "$ref": "#/components/schemas/BaseReq"
            }
          }
        },
        "required": [
          "title"
        ],
        "description": "Model for Project Request"
      },
      "Project": {
        "title": "Project Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "p_124hhlkbeasewh",
            "description": "Unique Project ID"
          },
          "title": {
            "type": "string",
            "description": "Project Title",
            "example": "my-project"
          },
          "status": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "Project Description",
            "example": "This is my project description"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta",
            "description": "Meta Info such as theme colors"
          },
          "color": {
            "type": "string",
            "description": "Primary Theme Color",
            "example": "#24716E"
          },
          "deleted": {
            "$ref": "#/components/schemas/Bool",
            "description": "Is the project deleted"
          },
          "order": {
            "type": "number",
            "description": "The order in project list"
          },
          "bases": {
            "type": "array",
            "description": "List of base models",
            "items": {
              "$ref": "#/components/schemas/Base"
            }
          },
          "is_meta": {
            "$ref": "#/components/schemas/Bool"
          },
          "prefix": {
            "type": "string",
            "description": "Project prefix. Used in XCDB only.",
            "example": "nc_vm5q__"
          },
          "created_at": {
            "description": "The created time of the record",
            "type": "string",
            "format": "date-time",
            "example": "2023-03-01 14:27:36"
          },
          "updated_at": {
            "description": "The updated time of the record",
            "type": "string",
            "format": "date-time",
            "example": "2023-03-01 14:27:36"
          }
        },
        "description": "Model for Project"
      },
      "ProjectList": {
        "type": "object",
        "x-examples": {
          "example-1": {
            "bases": {
              "list": [
                {
                  "id": "string",
                  "project_id": "string",
                  "alias": "string",
                  "host": "string",
                  "port": 0,
                  "username": "string",
                  "password": "string",
                  "database": "string",
                  "url": "string",
                  "params": "string",
                  "type": "string",
                  "ssl": "string"
                }
              ],
              "pageInfo": {
                "pageSize": 0,
                "totalRows": 0,
                "sort": "string",
                "isFirstPage": true,
                "isLastPage": true
              }
            }
          }
        },
        "properties": {
          "list": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "description": "List of Project Models",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/Paginated",
            "description": "Pagination Info"
          }
        },
        "title": "Project List Model",
        "description": "Model for Project List"
      },
      "Base": {
        "title": "Base Model",
        "type": "object",
        "description": "Model for Base",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Base ID"
          },
          "project_id": {
            "type": "string",
            "description": "The project ID that this base belongs to"
          },
          "alias": {
            "type": "string",
            "description": "Base Name - Default BASE will be null by default",
            "example": "My Base"
          },
          "type": {
            "type": "string",
            "description": "DB Type",
            "example": "mysql2",
            "enum": [
              "mysql2",
              "sqlite",
              "mysql",
              "mssql",
              "snowflake",
              "oracledb",
              "pg"
            ]
          },
          "is_meta": {
            "$ref": "#/components/schemas/Bool",
            "description": "Is the data source connected externally"
          },
          "config": {
            "description": "Encrypted Base Configuration",
            "type": "string"
          },
          "created_at": {
            "description": "The datatime this base is created at",
            "type": "string",
            "format": "date-time",
            "example": "2023-03-01 14:27:36"
          },
          "updated_at": {
            "description": "The datatime this base is updated at",
            "type": "string",
            "format": "date-time",
            "example": "2023-03-01 14:27:36"
          },
          "inflection_column": {
            "type": "string",
            "description": "Inflection for columns",
            "example": "camelize"
          },
          "inflection_table": {
            "type": "string",
            "description": "Inflection for tables",
            "example": "camelize"
          },
          "order": {
            "type": "number",
            "description": "The order of the list of bases",
            "example": 1
          },
          "enabled": {
            "$ref": "#/components/schemas/Bool",
            "description": "Is this base enabled"
          }
        }
      },
      "BaseReq": {
        "title": "Base Request",
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "maxLength": 128,
            "description": "Base Name - Default BASE will be null by default",
            "example": "My Base"
          },
          "type": {
            "type": "string",
            "enum": [
              "mysql",
              "mysql2",
              "pg",
              "sqlite3",
              "mssql",
              "oracledb",
              "snowflake"
            ],
            "description": "DB Type"
          },
          "is_meta": {
            "type": "boolean",
            "description": "Is the data source connected externally"
          },
          "config": {
            "description": "Encrypted Base Configuration",
            "type": "string"
          },
          "inflection_column": {
            "type": "string",
            "description": "Inflection for columns",
            "example": "camelize"
          },
          "inflection_table": {
            "type": "string",
            "description": "Inflection for tables",
            "example": "camelize"
          }
        },
        "description": "Model for Base Request"
      },
      "BaseList": {
        "description": "Model for Base List",
        "type": "object",
        "x-examples": {
          "example-1": {
            "bases": {
              "list": [
                {
                  "id": "string",
                  "project_id": "string",
                  "alias": "string",
                  "host": "string",
                  "port": 0,
                  "username": "string",
                  "password": "string",
                  "database": "string",
                  "url": "string",
                  "params": "string",
                  "type": "string",
                  "ssl": "string"
                }
              ],
              "pageInfo": {
                "pageSize": 0,
                "totalRows": 0,
                "sort": "string",
                "isFirstPage": true,
                "isLastPage": true
              }
            }
          }
        },
        "properties": {
          "bases": {
            "type": "object",
            "required": [
              "list",
              "pageInfo"
            ],
            "properties": {
              "list": {
                "type": "array",
                "uniqueItems": true,
                "minItems": 1,
                "items": {
                  "$ref": "#/components/schemas/Base"
                }
              },
              "pageInfo": {
                "$ref": "#/components/schemas/Paginated"
              }
            }
          }
        },
        "required": [
          "bases"
        ],
        "title": "Base List Model"
      },
      "Table": {
        "title": "Table Model",
        "type": "object",
        "examples": [
          {
            "id": "string",
            "project_id": "string",
            "base_id": "string",
            "title": "string",
            "alias": "string",
            "type": "string",
            "enabled": true,
            "parent_id": "string",
            "show_as": "string",
            "tags": "string",
            "pinned": true,
            "deleted": true,
            "order": 0,
            "column": [
              {
                "id": "string",
                "base_id": "string",
                "fk_model_id": "string",
                "title": "string",
                "alias": "string",
                "ui_data_type": "string",
                "data_type": "string",
                "numeric_precision": "string",
                "numeric_scale": "string",
                "character_maximum_length": "string",
                "column_ordinal_position": "string",
                "primary_key": true,
                "primary_value": true,
                "rqd": "string",
                "un": "string",
                "column_type": "string",
                "auto_increment": true,
                "unique": true,
                "column_default": "string",
                "column_comment": "string",
                "character_set_name": "string",
                "data_type_x": "string",
                "data_type_x_precision": "string",
                "data_type_x_scale": "string",
                "auto_update_timestamp": true,
                "deleted": true,
                "visible": true,
                "order": 0,
                "colOptions": {
                  "id": "string",
                  "type": "string",
                  "virtual": true,
                  "fk_column_id": "string",
                  "fk_child_column_id": "string",
                  "fk_parent_column_id": "string",
                  "fk_mm_model_id": "string",
                  "fk_mm_child_column_id": "string",
                  "fk_mm_parent_column_id": "string",
                  "ur": "string",
                  "dr": "string",
                  "fk_index_name": "string",
                  "deleted": "string",
                  "order": "string"
                }
              }
            ],
            "columnByIds": {}
          }
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "base_id": {
            "type": "string"
          },
          "table_name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "enabled": {
            "$ref": "#/components/schemas/Bool"
          },
          "parent_id": {
            "type": "string"
          },
          "show_as": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "pinned": {
            "$ref": "#/components/schemas/Bool"
          },
          "deleted": {
            "$ref": "#/components/schemas/Bool"
          },
          "order": {
            "type": "number"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            }
          },
          "columnsById": {
            "type": "object"
          },
          "slug": {
            "type": "string"
          },
          "mm": {
            "$ref": "#/components/schemas/Bool"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        },
        "required": [
          "table_name",
          "title"
        ],
        "description": "Model for Table"
      },
      "View": {
        "title": "View Model",
        "type": "object",
        "examples": [
          {
            "id": "string",
            "fk_project_id": "string",
            "fk_base_id": "string",
            "title": "string",
            "alias": "string",
            "type": "string",
            "enabled": true,
            "parent_id": "string",
            "show_as": "string",
            "tags": "string",
            "pinned": true,
            "deleted": true,
            "order": 0,
            "column": [
              {
                "id": "string",
                "base_id": "string",
                "fk_model_id": "string",
                "title": "string",
                "alias": "string",
                "ui_data_type": "string",
                "data_type": "string",
                "numeric_precision": "string",
                "numeric_scale": "string",
                "character_maximum_length": "string",
                "column_ordinal_position": "string",
                "primary_key": true,
                "primary_value": true,
                "rqd": "string",
                "un": "string",
                "column_type": "string",
                "auto_increment": true,
                "unique": true,
                "column_default": "string",
                "column_comment": "string",
                "character_set_name": "string",
                "data_type_x": "string",
                "data_type_x_precision": "string",
                "data_type_x_scale": "string",
                "auto_update_timestamp": true,
                "deleted": true,
                "visible": true,
                "order": 0,
                "colOptions": {
                  "id": "string",
                  "type": "string",
                  "virtual": true,
                  "fk_column_id": "string",
                  "fk_child_column_id": "string",
                  "fk_parent_column_id": "string",
                  "fk_mm_model_id": "string",
                  "fk_mm_child_column_id": "string",
                  "fk_mm_parent_column_id": "string",
                  "ur": "string",
                  "dr": "string",
                  "fk_index_name": "string",
                  "deleted": "string",
                  "order": "string"
                }
              }
            ],
            "columnByIds": {}
          }
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "deleted": {
            "$ref": "#/components/schemas/Bool"
          },
          "order": {
            "type": "number"
          },
          "fk_model_id": {
            "$ref": "#/components/schemas/Id"
          },
          "slug": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "show_system_fields": {
            "$ref": "#/components/schemas/Bool"
          },
          "lock_type": {
            "type": "string",
            "enum": [
              "collaborative",
              "locked",
              "personal"
            ]
          },
          "type": {
            "type": "number"
          },
          "view": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Form"
              },
              {
                "$ref": "#/components/schemas/Grid"
              },
              {
                "$ref": "#/components/schemas/Gallery"
              },
              {
                "$ref": "#/components/schemas/Kanban"
              },
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          }
        },
        "required": [
          "title"
        ],
        "description": "Model for View"
      },
      "TableInfo": {
        "title": "TableInfo Model",
        "type": "object",
        "examples": [
          {
            "id": "string",
            "fk_project_id": "string",
            "fk_base_id": "string",
            "title": "string",
            "alias": "string",
            "type": "string",
            "enabled": "string",
            "parent_id": "string",
            "show_as": "string",
            "tags": "string",
            "pinned": true,
            "deleted": true,
            "order": 0,
            "column": [
              {
                "id": "string",
                "base_id": "string",
                "fk_model_id": "string",
                "title": "string",
                "alias": "string",
                "ui_data_type": "string",
                "data_type": "string",
                "numeric_precision": "string",
                "numeric_scale": "string",
                "character_maximum_length": "string",
                "column_ordinal_position": "string",
                "primary_key": "string",
                "primary_value": "string",
                "rqd": "string",
                "un": "string",
                "column_type": "string",
                "auto_increment": "string",
                "unique": "string",
                "column_default": "string",
                "column_comment": "string",
                "character_set_name": "string",
                "data_type_x": "string",
                "data_type_x_precision": "string",
                "data_type_x_scale": "string",
                "auto_update_timestamp": true,
                "deleted": true,
                "visible": true,
                "order": 0,
                "colOptions": {
                  "id": "string",
                  "type": "string",
                  "virtual": true,
                  "fk_column_id": "string",
                  "fk_child_column_id": "string",
                  "fk_parent_column_id": "string",
                  "fk_mm_model_id": "string",
                  "fk_mm_child_column_id": "string",
                  "fk_mm_parent_column_id": "string",
                  "ur": "string",
                  "dr": "string",
                  "fk_index_name": "string",
                  "deleted": "string",
                  "order": "string"
                }
              }
            ],
            "filters": [
              {
                "id": "string",
                "fk_model_id": "string",
                "fk_column_id": "string",
                "logical_op": "string",
                "comparison_op": "string",
                "value": "string",
                "is_group": true,
                "children": [
                  {}
                ]
              }
            ],
            "sort": [
              {
                "id": "string",
                "fk_model_id": "string",
                "fk_column_id": "string",
                "direction": "string",
                "order": 0
              }
            ]
          }
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "fk_project_id": {
            "$ref": "#/components/schemas/Id"
          },
          "fk_base_id": {
            "$ref": "#/components/schemas/Id"
          },
          "title": {
            "type": "string"
          },
          "table_name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "enabled": {
            "type": "string"
          },
          "parent_id": {
            "type": "string"
          },
          "show_as": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "pinned": {
            "$ref": "#/components/schemas/Bool"
          },
          "deleted": {
            "$ref": "#/components/schemas/Bool"
          },
          "order": {
            "type": "number"
          },
          "column": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          }
        },
        "required": [
          "title",
          "table_name"
        ],
        "description": "Model for Table Info"
      },
      "TableReq": {
        "title": "Table Request Model",
        "type": "object",
        "properties": {
          "table_name": {
            "type": "string",
            "description": "Table name",
            "example": "table_name",
            "minLength": 1,
            "maxLength": 255
          },
          "title": {
            "type": "string",
            "description": "Table title",
            "example": "Table title",
            "minLength": 1,
            "maxLength": 255
          },
          "order": {
            "type": "number"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NormalColumnRequest"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        },
        "required": [
          "table_name",
          "title",
          "columns"
        ],
        "description": "Model for Table Request"
      },
      "TableList": {
        "description": "Model for Table List",
        "type": "object",
        "x-examples": {
          "example-1": {
            "bases": {
              "list": [
                {
                  "id": "string",
                  "project_id": "string",
                  "alias": "string",
                  "host": "string",
                  "port": 0,
                  "username": "string",
                  "password": "string",
                  "database": "string",
                  "url": "string",
                  "params": "string",
                  "type": "string",
                  "ssl": "string"
                }
              ],
              "pageInfo": {
                "pageSize": 0,
                "totalRows": 0,
                "sort": "string",
                "isFirstPage": true,
                "isLastPage": true
              }
            }
          }
        },
        "properties": {
          "list": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/Table"
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/Paginated"
          }
        },
        "required": [
          "tables"
        ],
        "title": "Table List Model"
      },
      "Filter": {
        "type": "object",
        "title": "Filter Model",
        "properties": {
          "id": {
            "type": "string"
          },
          "fk_model_id": {
            "$ref": "#/components/schemas/Id"
          },
          "fk_column_id": {
            "$ref": "#/components/schemas/Id"
          },
          "logical_op": {
            "type": "string"
          },
          "comparison_op": {
            "type": "string"
          },
          "value": {},
          "is_group": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "project_id": {
            "type": "string",
            "readOnly": true
          },
          "base_id": {
            "type": "string",
            "readOnly": true
          },
          "fk_parent_id": {
            "$ref": "#/components/schemas/Id"
          },
          "fk_view_id": {
            "$ref": "#/components/schemas/StringOrNull"
          },
          "fk_hook_id": {
            "$ref": "#/components/schemas/StringOrNull"
          }
        },
        "readOnly": true,
        "description": "Model for Filter"
      },
      "FilterReq": {
        "type": "object",
        "title": "Filter Request Model",
        "properties": {
          "fk_column_id": {
            "$ref": "#/components/schemas/Id"
          },
          "logical_op": {
            "type": "string",
            "enum": [
              "and",
              "or",
              "not"
            ]
          },
          "comparison_op": {
            "type": "string",
            "enum": [
              "checked",
              "notchecked",
              "eq",
              "neq",
              "like",
              "nlike",
              "empty",
              "notempty",
              "null",
              "notnull",
              "allof",
              "anyof",
              "nallof",
              "nanyof",
              "gt",
              "lt",
              "gte",
              "lte",
              "blank",
              "notblank"
            ]
          },
          "value": {},
          "is_group": {
            "$ref": "#/components/schemas/Bool"
          },
          "fk_parent_id": {
            "$ref": "#/components/schemas/Id"
          }
        },
        "readOnly": true,
        "description": "Model for Filter Request"
      },
      "FilterList": {
        "description": "Model for Filter List",
        "type": "object",
        "x-examples": {
          "example-1": {
            "bases": {
              "list": [
                {
                  "id": "string",
                  "project_id": "string",
                  "alias": "string",
                  "host": "string",
                  "port": 0,
                  "username": "string",
                  "password": "string",
                  "database": "string",
                  "url": "string",
                  "params": "string",
                  "type": "string",
                  "ssl": "string"
                }
              ],
              "pageInfo": {
                "pageSize": 0,
                "totalRows": 0,
                "sort": "string",
                "isFirstPage": true,
                "isLastPage": true
              }
            }
          }
        },
        "properties": {
          "filters": {
            "type": "object",
            "required": [
              "list"
            ],
            "properties": {
              "list": {
                "type": "array",
                "uniqueItems": true,
                "minItems": 1,
                "items": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          }
        },
        "required": [
          "filters"
        ],
        "title": "Filter List Model"
      },
      "Sort": {
        "title": "Sort Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fk_model_id": {
            "$ref": "#/components/schemas/Id"
          },
          "fk_column_id": {
            "$ref": "#/components/schemas/Id"
          },
          "direction": {
            "type": "string"
          },
          "order": {
            "type": "number"
          },
          "project_id": {
            "type": "string",
            "readOnly": true
          },
          "base_id": {
            "type": "string",
            "readOnly": true
          }
        },
        "description": "Model for Sort"
      },
      "SortReq": {
        "title": "Sort Request Model",
        "type": "object",
        "properties": {
          "fk_column_id": {
            "$ref": "#/components/schemas/Id"
          },
          "direction": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        },
        "minProperties": 1,
        "description": "Model for Sort Request"
      },
      "SortList": {
        "description": "Model for Sort List",
        "type": "object",
        "x-examples": {
          "example-1": {
            "bases": {
              "list": [
                {
                  "id": "string",
                  "project_id": "string",
                  "alias": "string",
                  "host": "string",
                  "port": 0,
                  "username": "string",
                  "password": "string",
                  "database": "string",
                  "url": "string",
                  "params": "string",
                  "type": "string",
                  "ssl": "string"
                }
              ],
              "pageInfo": {
                "pageSize": 0,
                "totalRows": 0,
                "sort": "string",
                "isFirstPage": true,
                "isLastPage": true
              }
            }
          }
        },
        "properties": {
          "sorts": {
            "type": "object",
            "required": [
              "list"
            ],
            "properties": {
              "list": {
                "type": "array",
                "uniqueItems": true,
                "minItems": 1,
                "items": {
                  "$ref": "#/components/schemas/SharedView"
                }
              }
            }
          }
        },
        "required": [
          "sorts"
        ],
        "title": "Sort List Model"
      },
      "Column": {
        "title": "Column Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "base_id": {
            "type": "string"
          },
          "fk_model_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "uidt": {
            "type": "string"
          },
          "dt": {
            "type": "string"
          },
          "np": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "ns": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "clen": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "cop": {
            "type": "string"
          },
          "pk": {
            "$ref": "#/components/schemas/Bool"
          },
          "pv": {
            "$ref": "#/components/schemas/Bool"
          },
          "rqd": {
            "$ref": "#/components/schemas/Bool"
          },
          "column_name": {
            "type": "string"
          },
          "un": {
            "$ref": "#/components/schemas/Bool"
          },
          "ct": {
            "type": "string"
          },
          "ai": {
            "$ref": "#/components/schemas/Bool"
          },
          "unique": {
            "$ref": "#/components/schemas/Bool"
          },
          "cdf": {
            "type": "string"
          },
          "cc": {
            "type": "string"
          },
          "csn": {
            "type": "string"
          },
          "dtx": {
            "type": "string"
          },
          "dtxp": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ]
          },
          "dtxs": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ]
          },
          "au": {
            "$ref": "#/components/schemas/Bool"
          },
          "deleted": {
            "$ref": "#/components/schemas/Bool"
          },
          "visible": {
            "$ref": "#/components/schemas/Bool"
          },
          "order": {
            "type": "number"
          },
          "system": {
            "$ref": "#/components/schemas/Bool"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "colOptions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LinkToAnotherRecord"
              },
              {
                "$ref": "#/components/schemas/Formula"
              },
              {
                "$ref": "#/components/schemas/Rollup"
              },
              {
                "$ref": "#/components/schemas/Lookup"
              },
              {
                "$ref": "#/components/schemas/SelectOptions"
              },
              {
                "type": "object"
              }
            ]
          }
        },
        "description": "Model for Column"
      },
      "ColumnList": {
        "description": "Model for Column List",
        "type": "object",
        "x-examples": {
          "example-1": {
            "bases": {
              "list": [
                {
                  "id": "string",
                  "project_id": "string",
                  "alias": "string",
                  "host": "string",
                  "port": 0,
                  "username": "string",
                  "password": "string",
                  "database": "string",
                  "url": "string",
                  "params": "string",
                  "type": "string",
                  "ssl": "string"
                }
              ],
              "pageInfo": {
                "pageSize": 0,
                "totalRows": 0,
                "sort": "string",
                "isFirstPage": true,
                "isLastPage": true
              }
            }
          }
        },
        "properties": {
          "columns": {
            "type": "object",
            "required": [
              "list"
            ],
            "properties": {
              "list": {
                "type": "array",
                "uniqueItems": true,
                "minItems": 1,
                "items": {
                  "$ref": "#/components/schemas/Column"
                }
              }
            }
          }
        },
        "required": [
          "columns"
        ],
        "title": "Column List Model"
      },
      "LinkToAnotherRecord": {
        "title": "LinkToAnotherRecord Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "virtual": {
            "$ref": "#/components/schemas/Bool"
          },
          "fk_column_id": {
            "type": "string"
          },
          "fk_child_column_id": {
            "type": "string"
          },
          "fk_parent_column_id": {
            "type": "string"
          },
          "fk_mm_model_id": {
            "type": "string"
          },
          "fk_related_model_id": {
            "type": "string"
          },
          "fk_mm_child_column_id": {
            "type": "string"
          },
          "fk_mm_parent_column_id": {
            "type": "string"
          },
          "ur": {
            "type": "string"
          },
          "dr": {
            "type": "string"
          },
          "fk_index_name": {
            "type": "string"
          },
          "deleted": {
            "type": "string"
          },
          "order": {
            "type": "string"
          }
        },
        "description": "Model for LinkToAnotherRecord"
      },
      "Lookup": {
        "title": "Lookup Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "virtual": {
            "$ref": "#/components/schemas/Bool"
          },
          "fk_column_id": {
            "type": "string"
          },
          "fk_relation_column_id": {
            "type": "string"
          },
          "fk_lookup_column_id": {
            "type": "string"
          },
          "deleted": {
            "type": "string"
          },
          "order": {
            "type": "string"
          }
        },
        "description": "Model for Lookup"
      },
      "Rollup": {
        "title": "Rollup Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "virtual": {
            "$ref": "#/components/schemas/Bool"
          },
          "fk_column_id": {
            "type": "string"
          },
          "fk_relation_column_id": {
            "type": "string"
          },
          "fk_rollup_column_id": {
            "type": "string"
          },
          "rollup_function": {
            "type": "string"
          },
          "deleted": {
            "type": "string"
          },
          "order": {
            "type": "string"
          }
        },
        "description": "Model for Rollup"
      },
      "Formula": {
        "title": "Formula Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "virtual": {
            "$ref": "#/components/schemas/Bool"
          },
          "fk_column_id": {
            "type": "string"
          },
          "formula": {
            "type": "string"
          },
          "formula_raw": {
            "type": "string"
          },
          "deleted": {
            "type": "string"
          },
          "order": {
            "type": "string"
          }
        },
        "description": "Model for Formula"
      },
      "SelectOptions": {
        "title": "SelectOptions Model",
        "type": "object",
        "properties": {
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectOption"
            }
          }
        },
        "required": [
          "options"
        ],
        "examples": [
          {
            "options": [
              {
                "id": "string",
                "fk_column_id": "string",
                "title": "string",
                "color": "string",
                "order": 1
              }
            ]
          }
        ],
        "description": "Model for SelectOptions"
      },
      "SelectOption": {
        "title": "SelectOption Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fk_column_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "order": {
            "type": "number"
          }
        },
        "examples": [
          {
            "id": "string",
            "fk_column_id": "string",
            "title": "string",
            "color": "string",
            "order": 1
          }
        ],
        "description": "Model for SelectOption"
      },
      "Grid": {
        "title": "Grid Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "deleted": {
            "$ref": "#/components/schemas/Bool"
          },
          "order": {
            "type": "number"
          },
          "lock_type": {
            "type": "string",
            "enum": [
              "collaborative",
              "locked",
              "personal"
            ]
          },
          "row_height": {
            "type": "number"
          }
        },
        "description": "Model for Grid"
      },
      "GridReq": {
        "title": "Grid Request Model",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the grid",
            "example": "My Grid",
            "minLength": 1,
            "maxLength": 255
          },
          "order": {
            "type": "number",
            "description": "The order of the grid",
            "example": 1
          },
          "lock_type": {
            "type": "string",
            "enum": [
              "collaborative",
              "locked",
              "personal"
            ]
          },
          "row_height": {
            "type": "number",
            "description": "The height of the grid rows",
            "example": 1,
            "minimum": 1
          }
        },
        "description": "Model for Grid Request",
        "required": [
          "title"
        ]
      },
      "Gallery": {
        "title": "Gallery Model",
        "type": "object",
        "description": "Model for Gallery",
        "properties": {
          "fk_view_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "deleted": {
            "$ref": "#/components/schemas/Bool"
          },
          "order": {
            "type": "number"
          },
          "next_enabled": {
            "$ref": "#/components/schemas/Bool"
          },
          "prev_enabled": {
            "$ref": "#/components/schemas/Bool"
          },
          "cover_image_idx": {
            "type": "integer"
          },
          "cover_image": {
            "type": "string"
          },
          "restrict_types": {
            "type": "string"
          },
          "restrict_size": {
            "type": "string"
          },
          "restrict_number": {
            "type": "string"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GalleryColumn"
            }
          },
          "fk_model_id": {
            "type": "string"
          },
          "fk_cover_image_col_id": {
            "type": "string"
          },
          "lock_type": {
            "type": "string",
            "enum": [
              "collaborative",
              "locked",
              "personal"
            ]
          }
        }
      },
      "GalleryReq": {
        "title": "Gallery Request Model",
        "type": "object",
        "description": "Model for Gallery Request",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the gallery",
            "example": "My Gallery",
            "minLength": 1,
            "maxLength": 255
          },
          "next_enabled": {
            "$ref": "#/components/schemas/Bool"
          },
          "prev_enabled": {
            "$ref": "#/components/schemas/Bool"
          },
          "cover_image_idx": {
            "type": "integer",
            "minimum": 0
          },
          "cover_image": {
            "type": "string"
          },
          "restrict_types": {
            "type": "string"
          },
          "restrict_size": {
            "type": "string"
          },
          "restrict_number": {
            "type": "string"
          },
          "fk_cover_image_col_id": {
            "type": "string",
            "description": "The id of the column that contains the cover image",
            "maxLength": 20
          },
          "lock_type": {
            "type": "string",
            "enum": [
              "collaborative",
              "locked",
              "personal"
            ]
          }
        },
        "required": [
          "title"
        ]
      },
      "GalleryColumn": {
        "title": "Gallery Column Model",
        "type": "object",
        "description": "Model for Gallery Column",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "help": {
            "type": "string"
          },
          "fk_col_id": {
            "type": "string"
          },
          "fk_gallery_id": {
            "type": "string"
          }
        }
      },
      "GridColumnReq": {
        "title": "Grid Column Request Model",
        "type": "object",
        "description": "Model for Gallery Column Request",
        "properties": {
          "label": {
            "type": "string",
            "description": "The label of the column",
            "example": "My Column",
            "maxLength": 255
          },
          "help": {
            "type": "string",
            "maxLength": 255
          },
          "fk_column_id": {
            "type": "string"
          },
          "fk_gallery_id": {
            "type": "string"
          },
          "width": {
            "type": "string",
            "description": "The width of the column",
            "example": "200px",
            "maxLength": 255,
            "pattern": "^[0-9]+(px|%)$"
          }
        }
      },
      "GridColumn": {
        "title": "Grid Column Model",
        "type": "object",
        "description": "Model for Grid Column",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "help": {
            "type": "string"
          },
          "fk_column_id": {
            "type": "string"
          },
          "fk_gallery_id": {
            "type": "string"
          },
          "width": {
            "type": "string"
          }
        }
      },
      "KanbanColumn": {
        "title": "Kanban Column Model",
        "type": "object",
        "description": "Model for Kanban Column",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "help": {
            "type": "string"
          },
          "fk_column_id": {
            "type": "string"
          },
          "fk_kanban_id": {
            "type": "string"
          }
        }
      },
      "Kanban": {
        "title": "Kanban Model",
        "type": "object",
        "description": "Model for Kanban",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KanbanColumn"
            }
          },
          "fk_model_id": {
            "type": "string"
          },
          "fk_grp_col_id": {
            "$ref": "#/components/schemas/StringOrNull"
          },
          "fk_cover_image_col_id": {
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "GeoLocation": {
        "title": "Geo Location Model",
        "type": "object",
        "description": "Model for Geo Location",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Map": {
        "title": "Map Model",
        "type": "object",
        "description": "Model for Map",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "initial_geo_position": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "fk_model_id": {
            "type": "string"
          },
          "fk_view_id": {
            "type": "string",
            "minLength": 1
          },
          "fk_geo_data_col_id": {
            "$ref": "#/components/schemas/StringOrNull"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapColumn"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "MapColumn": {
        "title": "Map Column Model",
        "type": "object",
        "description": "Model for Map Column",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "help": {
            "type": "string"
          },
          "fk_col_id": {
            "type": "string"
          },
          "fk_gallery_id": {
            "type": "string"
          }
        }
      },
      "LicenseReq": {
        "title": "License Key Request Model",
        "type": "object",
        "description": "Model for Kanban Request",
        "properties": {
          "key": {
            "type": "string",
            "description": "The license key",
            "example": "1234567890",
            "minLength": 10,
            "maxLength": 255
          }
        }
      },
      "KanbanReq": {
        "title": "Kanban Request Model",
        "type": "object",
        "description": "Model for Kanban Request",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the kanban",
            "example": "My Kanban",
            "minLength": 1,
            "maxLength": 255
          },
          "fk_grp_col_id": {
            "$ref": "#/components/schemas/StringOrNull"
          }
        },
        "required": [
          "title"
        ]
      },
      "KanbanUpdateReq": {
        "title": "Kanban Update Request Model",
        "type": "object",
        "description": "Model for Kanban Update Request",
        "properties": {
          "fk_grp_col_id": {
            "$ref": "#/components/schemas/StringOrNull"
          }
        }
      },
      "Form": {
        "title": "Form Model",
        "type": "object",
        "description": "Model for Form",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "heading": {
            "type": "string"
          },
          "subheading": {
            "type": "string"
          },
          "success_msg": {
            "type": "string"
          },
          "redirect_url": {
            "$ref": "#/components/schemas/StringOrNull"
          },
          "redirect_after_secs": {
            "$ref": "#/components/schemas/StringOrNull"
          },
          "email": {
            "$ref": "#/components/schemas/StringOrNull"
          },
          "banner_image_url": {
            "$ref": "#/components/schemas/StringOrNull"
          },
          "logo_url": {
            "$ref": "#/components/schemas/StringOrNull"
          },
          "submit_another_form": {
            "$ref": "#/components/schemas/Bool"
          },
          "show_blank_form": {
            "$ref": "#/components/schemas/Bool"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormColumn"
            }
          },
          "fk_model_id": {
            "type": "string"
          },
          "lock_type": {
            "type": "string",
            "enum": [
              "collaborative",
              "locked",
              "personal"
            ]
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "FormReq": {
        "title": "Form Request Model",
        "type": "object",
        "description": "Model for Form Request",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the form",
            "example": "My Form",
            "minLength": 1,
            "maxLength": 255
          },
          "heading": {
            "type": "string",
            "description": "The heading of the form",
            "example": "My Form",
            "maxLength": 255
          },
          "subheading": {
            "type": "string",
            "description": "The subheading of the form",
            "example": "My Form Subheading",
            "maxLength": 255
          },
          "success_msg": {
            "type": "string",
            "maxLength": 255
          },
          "redirect_url": {
            "oneOf": [
              {
                "type": "string",
                "format": "uri",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ]
          },
          "redirect_after_secs": {
            "oneOf": [
              {
                "type": "string",
                "pattern": "^[0-9]+$",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ]
          },
          "email": {
            "oneOf": [
              {
                "type": "string",
                "format": "email",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ]
          },
          "banner_image_url": {
            "$ref": "#/components/schemas/StringOrNull"
          },
          "logo_url": {
            "$ref": "#/components/schemas/StringOrNull"
          },
          "submit_another_form": {
            "$ref": "#/components/schemas/Bool"
          },
          "show_blank_form": {
            "$ref": "#/components/schemas/Bool"
          },
          "lock_type": {
            "type": "string",
            "enum": [
              "collaborative",
              "locked",
              "personal"
            ]
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "FormCreateReq": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormReq"
          },
          {
            "required": [
              "title"
            ]
          }
        ],
        "title": "Form Create Model",
        "description": "Model for Form Create"
      },
      "FormColumn": {
        "description": "Model for Form Column",
        "type": "object",
        "x-examples": {
          "example-1": {
            "_cn": "first_name",
            "alias": "first_name",
            "fk_column_id": "cl_yvyhsl9u81tokc",
            "id": "fvc_8z1i7t8aswkqxx",
            "fk_view_id": "vw_s1pf4umdnikoyn",
            "uuid": null,
            "label": "dsdsds",
            "help": null,
            "required": false,
            "show": 1,
            "order": 1,
            "created_at": "2022-02-15 12:39:04",
            "updated_at": "2022-02-15 12:39:16",
            "description": "dsdsdsdsd"
          }
        },
        "properties": {
          "fk_column_id": {
            "type": "string",
            "minLength": 1
          },
          "id": {
            "type": "string",
            "minLength": 1
          },
          "fk_view_id": {
            "type": "string",
            "minLength": 1
          },
          "uuid": {},
          "label": {
            "type": "string",
            "minLength": 1
          },
          "help": {},
          "required": {
            "$ref": "#/components/schemas/Bool"
          },
          "show": {
            "$ref": "#/components/schemas/Bool"
          },
          "order": {
            "type": "number"
          },
          "created_at": {
            "type": "string",
            "minLength": 1
          },
          "updated_at": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "minLength": 1
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        },
        "title": "Form Column Model"
      },
      "FormColumnReq": {
        "description": "Model for Form Column Request",
        "type": "object",
        "x-examples": {
          "example-1": {
            "_cn": "first_name",
            "alias": "first_name",
            "fk_column_id": "cl_yvyhsl9u81tokc",
            "id": "fvc_8z1i7t8aswkqxx",
            "fk_view_id": "vw_s1pf4umdnikoyn",
            "uuid": null,
            "label": "dsdsds",
            "help": null,
            "required": false,
            "show": 1,
            "order": 1,
            "created_at": "2022-02-15 12:39:04",
            "updated_at": "2022-02-15 12:39:16",
            "description": "dsdsdsdsd"
          }
        },
        "properties": {
          "label": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "help": {
            "maxLength": 255
          },
          "required": {
            "$ref": "#/components/schemas/Bool"
          },
          "show": {
            "$ref": "#/components/schemas/Bool"
          },
          "order": {
            "type": "number"
          },
          "description": {
            "type": "string",
            "maxLength": 255
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        },
        "title": "Form Column Request Model"
      },
      "Paginated": {
        "title": "Paginated Model",
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer"
          },
          "totalRows": {
            "type": "integer"
          },
          "sort": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Sort"
                }
              }
            ]
          },
          "isFirstPage": {
            "type": "boolean"
          },
          "isLastPage": {
            "type": "boolean"
          },
          "page": {
            "type": "number"
          }
        },
        "description": "Model for Paginated"
      },
      "HookList": {
        "description": "Model for Hook List",
        "type": "object",
        "x-examples": {
          "example-1": {
            "bases": {
              "list": [
                {
                  "id": "string",
                  "project_id": "string",
                  "alias": "string",
                  "host": "string",
                  "port": 0,
                  "username": "string",
                  "password": "string",
                  "database": "string",
                  "url": "string",
                  "params": "string",
                  "type": "string",
                  "ssl": "string"
                }
              ],
              "pageInfo": {
                "pageSize": 0,
                "totalRows": 0,
                "sort": "string",
                "isFirstPage": true,
                "isLastPage": true
              }
            }
          }
        },
        "properties": {
          "list": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "type": "object"
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/Paginated"
          }
        },
        "title": "Hook List Model"
      },
      "SharedView": {
        "title": "Shared View Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fk_view_id": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "deleted": {
            "type": "string"
          }
        },
        "description": "Model for Shared View"
      },
      "SharedViewList": {
        "description": "Model for Shared View List",
        "type": "object",
        "x-examples": {
          "example-1": {
            "bases": {
              "list": [
                {
                  "id": "string",
                  "project_id": "string",
                  "alias": "string",
                  "host": "string",
                  "port": 0,
                  "username": "string",
                  "password": "string",
                  "database": "string",
                  "url": "string",
                  "params": "string",
                  "type": "string",
                  "ssl": "string"
                }
              ],
              "pageInfo": {
                "pageSize": 0,
                "totalRows": 0,
                "sort": "string",
                "isFirstPage": true,
                "isLastPage": true
              }
            }
          }
        },
        "properties": {
          "list": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SharedView"
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/Paginated"
          }
        },
        "title": "Shared View List Model"
      },
      "ViewList": {
        "description": "Model for View List",
        "type": "object",
        "x-examples": {
          "example-1": {
            "bases": {
              "list": [
                {
                  "id": "string",
                  "project_id": "string",
                  "alias": "string",
                  "host": "string",
                  "port": 0,
                  "username": "string",
                  "password": "string",
                  "database": "string",
                  "url": "string",
                  "params": "string",
                  "type": "string",
                  "ssl": "string"
                }
              ],
              "pageInfo": {
                "pageSize": 0,
                "totalRows": 0,
                "sort": "string",
                "isFirstPage": true,
                "isLastPage": true
              }
            }
          }
        },
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/View"
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/Paginated"
          }
        },
        "required": [
          "views"
        ],
        "title": "View List Model"
      },
      "Attachment": {
        "title": "Attachment Model",
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "mimetype": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "data": {}
        },
        "description": "Model for Attachment"
      },
      "Webhook": {
        "title": "Webhook Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "description": "Model for Webhook"
      },
      "Audit": {
        "title": "Audit Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "base_id": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "fk_model_id": {
            "type": "string"
          },
          "row_id": {
            "type": "string"
          },
          "op_type": {
            "type": "string"
          },
          "op_sub_type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "details": {
            "type": "string"
          }
        },
        "description": "Model for Audit"
      },
      "Hook": {
        "title": "Hook Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fk_model_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "env": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "event": {
            "type": "string",
            "enum": [
              "after",
              "before"
            ]
          },
          "operation": {
            "type": "string",
            "enum": [
              "insert",
              "delete",
              "update"
            ]
          },
          "async": {
            "$ref": "#/components/schemas/Bool"
          },
          "notification": {
            "type": "string"
          },
          "retries": {
            "type": "number"
          },
          "retry_interval": {
            "type": "number"
          },
          "timeout": {
            "type": "number"
          },
          "active": {
            "$ref": "#/components/schemas/Bool"
          }
        },
        "description": "Model for Hook"
      },
      "HookReq": {
        "title": "Hook Request Model",
        "type": "object",
        "properties": {
          "fk_model_id": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "$ref": "#/components/schemas/StringOrNull"
          },
          "env": {
            "type": "string",
            "maxLength": 255
          },
          "event": {
            "type": "string",
            "enum": [
              "after",
              "before"
            ]
          },
          "operation": {
            "type": "string",
            "enum": [
              "insert",
              "delete",
              "update"
            ]
          },
          "async": {
            "$ref": "#/components/schemas/Bool"
          },
          "notification": {},
          "retries": {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ]
          },
          "retry_interval": {
            "oneOf": [
              {
                "type": "number",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ]
          },
          "timeout": {
            "oneOf": [
              {
                "type": "number",
                "minimum": 1
              },
              {
                "type": "null"
              }
            ]
          },
          "active": {
            "$ref": "#/components/schemas/Bool"
          }
        },
        "required": [
          "title",
          "event",
          "notification",
          "operation"
        ],
        "description": "Model for Hook Request"
      },
      "HookTestReq": {
        "title": "Hook Test Request Model",
        "type": "object",
        "properties": {
          "payload": {},
          "hook": {
            "$ref": "#/components/schemas/HookReq"
          }
        },
        "required": [
          "payload",
          "hook"
        ],
        "description": "Model for Hook Test Request"
      },
      "SignUpReq": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the user"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "Password of the user"
          }
        },
        "required": [
          "email",
          "password"
        ],
        "title": "Signup Request Model",
        "description": "Model for Signup Request"
      },
      "SignInReq": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the user"
          },
          "password": {
            "type": "string",
            "description": "Password of the user"
          }
        },
        "required": [
          "email",
          "password"
        ],
        "title": "Signin Request Model",
        "description": "Model for Signin Request"
      },
      "PasswordForgotReq": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the user"
          }
        },
        "required": [
          "email"
        ],
        "title": "Password Forgot Request Model",
        "description": "Model for Password Forgot Request"
      },
      "PasswordResetReq": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "minLength": 8,
            "example": "newpassword",
            "description": "New password"
          }
        },
        "required": [
          "password"
        ],
        "title": "Password Reset Request Model",
        "description": "Model for Password Reset Request"
      },
      "PasswordChangeReq": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string"
          },
          "newPassword": {
            "type": "string",
            "minLength": 8
          }
        },
        "required": [
          "currentPassword",
          "newPassword"
        ],
        "title": "Password Change Request Model",
        "description": "Model for Password Change Request"
      },
      "ApiTokenReq": {
        "title": "API Token Request Model",
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "Description of the API token"
          }
        },
        "description": "Model for API Token Request"
      },
      "Plugin": {
        "title": "Plugin Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "active": {
            "$ref": "#/components/schemas/Bool"
          },
          "rating": {
            "type": "number"
          },
          "version": {
            "type": "string"
          },
          "docs": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "status_details": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "input_schema": {
            "type": "string"
          },
          "input": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/StringOrNull"
              }
            ]
          },
          "creator": {
            "type": "string"
          },
          "creator_website": {
            "type": "string"
          },
          "price": {
            "type": "string"
          }
        },
        "description": "Model for Plugin"
      },
      "ModelRoleVisibility": {
        "title": "ModelRoleVisibility Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "base_id": {
            "type": "string"
          },
          "fk_model_id": {
            "type": "string"
          },
          "fk_view_id": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "disabled": {
            "$ref": "#/components/schemas/Bool"
          }
        },
        "description": "Model for ModelRoleVisibility"
      },
      "ApiToken": {
        "title": "API Token Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fk_user_id": {
            "type": "string"
          },
          "created_at": {},
          "updated_at": {}
        },
        "description": "Model for API Token"
      },
      "HookLog": {
        "title": "Hook Log Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "base_id": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "fk_hook_id": {
            "$ref": "#/components/schemas/StringOrNull"
          },
          "type": {
            "type": "string"
          },
          "event": {
            "type": "string"
          },
          "operation": {
            "type": "string"
          },
          "test_call": {
            "$ref": "#/components/schemas/Bool"
          },
          "payload": {},
          "conditions": {
            "type": "string"
          },
          "notifications": {
            "type": "string"
          },
          "error_code": {
            "type": "string"
          },
          "error_message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "execution_time": {
            "type": "string"
          },
          "response": {
            "type": "string"
          },
          "triggered_by": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "description": "Model for Hook Log"
      },
      "NormalColumnRequest": {
        "properties": {
          "uidt": {
            "type": "string",
            "enum": [
              "ID",
              "SingleLineText",
              "LongText",
              "Attachment",
              "Checkbox",
              "MultiSelect",
              "SingleSelect",
              "Collaborator",
              "Date",
              "Year",
              "GeoData",
              "Time",
              "PhoneNumber",
              "Email",
              "URL",
              "Number",
              "Decimal",
              "Currency",
              "Percent",
              "Duration",
              "Rating",
              "Count",
              "DateTime",
              "CreateTime",
              "LastModifiedTime",
              "AutoNumber",
              "Geometry",
              "JSON",
              "SpecificDBType",
              "Barcode",
              "Button"
            ]
          },
          "title": {
            "type": "string",
            "maxLength": 255
          },
          "dt": {
            "type": "string"
          },
          "np": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/StringOrNull"
              }
            ]
          },
          "ns": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/StringOrNull"
              }
            ]
          },
          "pk": {
            "$ref": "#/components/schemas/Bool"
          },
          "pv": {
            "$ref": "#/components/schemas/Bool"
          },
          "rqd": {
            "$ref": "#/components/schemas/Bool"
          },
          "column_name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "un": {
            "$ref": "#/components/schemas/Bool"
          },
          "ai": {
            "$ref": "#/components/schemas/Bool"
          },
          "unique": {
            "$ref": "#/components/schemas/Bool"
          },
          "cdf": {
            "$ref": "#/components/schemas/StringOrNull"
          },
          "cc": {
            "$ref": "#/components/schemas/StringOrNull"
          },
          "csn": {
            "$ref": "#/components/schemas/StringOrNull"
          },
          "dtx": {
            "$ref": "#/components/schemas/StringOrNull"
          },
          "dtxp": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "$ref": "#/components/schemas/StringOrNull"
              }
            ]
          },
          "dtxs": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "$ref": "#/components/schemas/StringOrNull"
              }
            ]
          },
          "au": {
            "$ref": "#/components/schemas/Bool"
          }
        },
        "description": "Model for Normal Column Request",
        "title": "Normal Column Request Model"
      },
      "LinkToAnotherColumnReq": {
        "type": "object",
        "properties": {
          "uidt": {
            "type": "string",
            "enum": [
              "LinkToAnotherRecord"
            ]
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "virtual": {
            "$ref": "#/components/schemas/Bool"
          },
          "parentId": {
            "$ref": "#/components/schemas/Id"
          },
          "childId": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "type": "string",
            "enum": [
              "hm",
              "bt",
              "mm"
            ]
          }
        },
        "required": [
          "uidt",
          "title",
          "parentId",
          "childId",
          "type"
        ],
        "title": "LinkToAnotherColumn Request Model",
        "description": "Model for LinkToAnotherColumn Request"
      },
      "RollupColumnReq": {
        "type": "object",
        "properties": {
          "uidt": {
            "type": "string",
            "enum": [
              "Rollup"
            ]
          },
          "title": {
            "type": "string",
            "maxLength": 255
          },
          "fk_relation_column_id": {
            "$ref": "#/components/schemas/Id"
          },
          "fk_rollup_column_id": {
            "$ref": "#/components/schemas/Id"
          },
          "rollup_function": {
            "type": "string",
            "enum": [
              "count",
              "min",
              "max",
              "avg",
              "sum",
              "countDistinct",
              "sumDistinct",
              "avgDistinct"
            ]
          }
        },
        "required": [
          "uidt",
          "title",
          "fk_relation_column_id",
          "fk_rollup_column_id",
          "rollup_function"
        ],
        "title": "Rollup Column Request Model",
        "description": "Model for Rollup Column Request"
      },
      "LookupColumnReq": {
        "properties": {
          "uidt": {
            "type": "string",
            "enum": [
              "Lookup"
            ]
          },
          "title": {
            "type": "string",
            "maxLength": 255
          },
          "fk_relation_column_id": {
            "$ref": "#/components/schemas/Id"
          },
          "fk_lookup_column_id": {
            "$ref": "#/components/schemas/Id"
          }
        },
        "required": [
          "uidt",
          "title",
          "fk_relation_column_id",
          "fk_lookup_column_id"
        ],
        "title": "Lookup Column Request Model",
        "description": "Model for Lookup Column Request"
      },
      "FormulaColumnReq": {
        "properties": {
          "uidt": {
            "type": "string",
            "enum": [
              "Formula"
            ]
          },
          "formula_raw": {
            "type": "string"
          },
          "formula": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "title": "Formula Column Request Model",
        "description": "Model for Formula Column Request"
      },
      "ColumnReq": {
        "allOf": [
          {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LinkToAnotherColumnReq"
              },
              {
                "$ref": "#/components/schemas/RollupColumnReq"
              },
              {
                "$ref": "#/components/schemas/FormulaColumnReq"
              },
              {
                "$ref": "#/components/schemas/LookupColumnReq"
              },
              {
                "$ref": "#/components/schemas/NormalColumnRequest"
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "column_name": {
                "type": "string"
              },
              "title": {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              "column_order": {
                "type": "object",
                "properties": {
                  "view_id": {
                    "type": "string"
                  },
                  "order": {
                    "type": "number"
                  }
                },
                "description": "Column order in a specific view"
              }
            },
            "required": [
              "column_name",
              "title",
              "uidt"
            ]
          }
        ],
        "description": "Model for Column Request",
        "type": "object",
        "title": "Column Request Model"
      },
      "UserInfo": {
        "title": "User Info Model",
        "type": "object",
        "description": "Model for User Info",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "email": {
            "type": "string",
            "description": "User Email",
            "format": "email"
          },
          "email_verified": {
            "type": "boolean",
            "description": "Set to true if the user's email has been verified."
          },
          "firstname": {
            "type": "string",
            "description": "The firstname of the user"
          },
          "lastname": {
            "type": "string",
            "description": "The lastname of the user"
          },
          "roles": {
            "description": "The roles of the user"
          }
        }
      },
      "VisibilityRuleReq": {
        "title": "Visibility Rule Request Model",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "disabled": {
              "type": "object",
              "properties": {
                "commenter": {
                  "$ref": "#/components/schemas/Bool"
                },
                "creator": {
                  "$ref": "#/components/schemas/Bool"
                },
                "editor": {
                  "$ref": "#/components/schemas/Bool"
                },
                "guest": {
                  "$ref": "#/components/schemas/Bool"
                },
                "owner": {
                  "$ref": "#/components/schemas/Bool"
                },
                "viewer": {
                  "$ref": "#/components/schemas/Bool"
                }
              }
            }
          }
        },
        "description": "Model for Visibility Rule Request"
      },
      "Bool": {
        "oneOf": [
          {
            "type": "boolean"
          },
          {
            "type": "integer"
          },
          {
            "type": "null"
          }
        ],
        "title": "Bool Model",
        "description": "Model for Bool"
      },
      "Id": {
        "type": "string",
        "minLength": 1,
        "maxLength": 20,
        "title": "ID Model",
        "description": "Model for ID"
      },
      "Password": {
        "type": "string",
        "minLength": 8,
        "title": "Password Model",
        "description": "Model for Password"
      },
      "StringOrNull": {
        "oneOf": [
          {
            "type": "string",
            "maxLength": 255
          },
          {
            "type": "null"
          }
        ],
        "title": "StringOrNull Model",
        "description": "Model for StringOrNull"
      },
      "Meta": {
        "oneOf": [
          {
            "type": "object"
          },
          {
            "type": "string"
          },
          {
            "type": "null"
          }
        ],
        "title": "Meta Model",
        "description": "Model for Meta"
      },
      "CommentReq": {
        "type": "object",
        "properties": {
          "row_id": {
            "type": "string"
          },
          "fk_model_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "row_id",
          "fk_model_id",
          "comment"
        ],
        "title": "Comment Request Model",
        "description": "Model for Comment Request"
      },
      "AuditRowUpdateReq": {
        "type": "object",
        "properties": {
          "fk_model_id": {
            "type": "string"
          },
          "column_name": {
            "type": "string"
          },
          "row_id": {
            "type": "string"
          },
          "value": {},
          "prev_value": {}
        },
        "title": "Audit Row Update Request Model",
        "description": "Model for Audit Row Update Request"
      },
      "OrgUserReq": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "roles": {
            "type": "string",
            "enum": [
              "org-level-creator",
              "org-level-viewer"
            ]
          }
        },
        "title": "Organisation User Request Model",
        "description": "Model for Organisation User Update Request"
      },
      "ProjectUserReq": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "roles": {
            "type": "string",
            "enum": [
              "owner",
              "editor",
              "viewer",
              "commenter",
              "guest"
            ]
          }
        },
        "required": [
          "email",
          "roles"
        ],
        "title": "Project User Request Model",
        "description": "Model for Project User Request"
      },
      "SharedBaseReq": {
        "type": "object",
        "properties": {
          "roles": {
            "type": "string",
            "enum": [
              "editor",
              "viewer",
              "commenter"
            ]
          },
          "password": {
            "type": "string",
            "minLength": 8
          }
        },
        "title": "Shared Base Request Model",
        "description": "Model for Shared Base Request"
      },
      "PluginTestReq": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 45
          },
          "input": {}
        },
        "required": [
          "title",
          "input"
        ],
        "title": "Plugin Test Request Model",
        "description": "Model for Plugin Test Request"
      },
      "PluginReq": {
        "type": "object",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/Bool"
          },
          "input": {}
        },
        "title": "Plugin Reqeust",
        "description": "Model for Plugin Request"
      },
      "ViewReq": {
        "type": "object",
        "properties": {
          "order": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "title": {
            "type": "string",
            "maxLength": 255
          },
          "show_system_fields": {
            "$ref": "#/components/schemas/Bool"
          },
          "lock_type": {
            "type": "string",
            "enum": [
              "collaborative",
              "locked",
              "personal"
            ]
          }
        },
        "title": "View Request Model",
        "description": "Model for View Request"
      },
      "SharedViewReq": {
        "type": "object",
        "title": "Shared View Request Model",
        "description": "Model for Shared View Request",
        "properties": {
          "password": {
            "type": "string",
            "minLength": 8,
            "example": "123456789",
            "description": "Password to restrict access"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta",
            "description": "Meta data passing to Shared View such as if download is allowed or not."
          }
        }
      }
    },
    "responses": {
      "ProjectList": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProjectList"
            },
            "examples": {
              "example-1": {
                "value": {
                  "projects": {
                    "list": [
                      {
                        "id": "string",
                        "title": "string",
                        "status": "string",
                        "description": "string",
                        "meta": "string",
                        "color": "string",
                        "deleted": "string",
                        "order": 0,
                        "bases": [
                          {
                            "id": "string",
                            "project_id": "string",
                            "alias": "string",
                            "type": "string",
                            "is_meta": true,
                            "config": null,
                            "created_at": null,
                            "updated_at": null
                          }
                        ],
                        "is_meta": true,
                        "prefix": "string",
                        "created_at": null,
                        "updated_at": null
                      }
                    ],
                    "pageInfo": {
                      "pageSize": 0,
                      "totalRows": 0,
                      "sort": "string",
                      "isFirstPage": true,
                      "isLastPage": true,
                      "page": 0
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BaseList": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BaseList"
            },
            "examples": {
              "example-1": {
                "value": {
                  "bases": {
                    "list": [
                      {
                        "id": "string",
                        "project_id": "string",
                        "alias": "string",
                        "host": "string",
                        "port": 0,
                        "username": "string",
                        "password": "string",
                        "database": "string",
                        "url": "string",
                        "params": "string",
                        "type": "string",
                        "ssl": "string"
                      }
                    ],
                    "pageInfo": {
                      "pageSize": 0,
                      "totalRows": 0,
                      "sort": "string",
                      "isFirstPage": true,
                      "isLastPage": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "TableList": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TableList"
            }
          }
        }
      },
      "ColumnList": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ColumnList"
            }
          }
        }
      },
      "FilterList": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FilterList"
            }
          }
        }
      },
      "SortList": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SortList"
            }
          }
        }
      },
      "ViewList": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ViewList"
            },
            "examples": {
              "example-1": {
                "value": {
                  "views": {
                    "list": [
                      {
                        "id": "string",
                        "title": "string",
                        "alias": "string",
                        "deleted": true,
                        "order": 0
                      }
                    ],
                    "pageInfo": {
                      "pageSize": 0,
                      "totalRows": 0,
                      "sort": "string",
                      "isFirstPage": true,
                      "isLastPage": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SharedViewList": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SharedViewList"
            }
          }
        }
      },
      "HookList": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/HookList"
            }
          }
        }
      },
      "UserList": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserList"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "xc-auth": {
        "name": "Auth Token",
        "type": "apiKey",
        "in": "header",
        "description": "JWT access token"
      },
      "xc-shared-base-id": {
        "name": "Shared Base ID",
        "type": "apiKey",
        "in": "header",
        "description": "Shared base uuid"
      }
    }
  }
}